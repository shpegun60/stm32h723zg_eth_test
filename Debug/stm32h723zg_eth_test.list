
stm32h723zg_eth_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000598c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005c58  08005c58  00015c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005c90  08005c90  00015c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005c98  08005c98  00015c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005c9c  08005c9c  00015c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08005ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08005cb0  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08005d10  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  240000d0  08005d70  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000274  08005d70  00020274  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001350e  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002240  00000000  00000000  0003360c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00035850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  000364c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032b61  00000000  00000000  00037048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117df  00000000  00000000  00069ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00144a47  00000000  00000000  0007b388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bfdcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003298  00000000  00000000  001bfe20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08005c40 	.word	0x08005c40

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	08005c40 	.word	0x08005c40

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b974 	b.w	800060c <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468e      	mov	lr, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d14d      	bne.n	80003e6 <__udivmoddi4+0xaa>
 800034a:	428a      	cmp	r2, r1
 800034c:	4694      	mov	ip, r2
 800034e:	d969      	bls.n	8000424 <__udivmoddi4+0xe8>
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	b152      	cbz	r2, 800036c <__udivmoddi4+0x30>
 8000356:	fa01 f302 	lsl.w	r3, r1, r2
 800035a:	f1c2 0120 	rsb	r1, r2, #32
 800035e:	fa20 f101 	lsr.w	r1, r0, r1
 8000362:	fa0c fc02 	lsl.w	ip, ip, r2
 8000366:	ea41 0e03 	orr.w	lr, r1, r3
 800036a:	4094      	lsls	r4, r2
 800036c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000370:	0c21      	lsrs	r1, r4, #16
 8000372:	fbbe f6f8 	udiv	r6, lr, r8
 8000376:	fa1f f78c 	uxth.w	r7, ip
 800037a:	fb08 e316 	mls	r3, r8, r6, lr
 800037e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000382:	fb06 f107 	mul.w	r1, r6, r7
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 811f 	bcs.w	80005d4 <__udivmoddi4+0x298>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 811c 	bls.w	80005d4 <__udivmoddi4+0x298>
 800039c:	3e02      	subs	r6, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 f707 	mul.w	r7, r0, r7
 80003b4:	42a7      	cmp	r7, r4
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x92>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c0:	f080 810a 	bcs.w	80005d8 <__udivmoddi4+0x29c>
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	f240 8107 	bls.w	80005d8 <__udivmoddi4+0x29c>
 80003ca:	4464      	add	r4, ip
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d2:	1be4      	subs	r4, r4, r7
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa4>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xc2>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80ef 	beq.w	80005ce <__udivmoddi4+0x292>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x160>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd4>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80f9 	bhi.w	8000602 <__udivmoddi4+0x2c6>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	469e      	mov	lr, r3
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa4>
 800041e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa4>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xec>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 8092 	bne.w	8000556 <__udivmoddi4+0x21a>
 8000432:	eba1 010c 	sub.w	r1, r1, ip
 8000436:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	2601      	movs	r6, #1
 8000440:	0c20      	lsrs	r0, r4, #16
 8000442:	fbb1 f3f7 	udiv	r3, r1, r7
 8000446:	fb07 1113 	mls	r1, r7, r3, r1
 800044a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044e:	fb0e f003 	mul.w	r0, lr, r3
 8000452:	4288      	cmp	r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x12c>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f103 38ff 	add.w	r8, r3, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x12a>
 8000460:	4288      	cmp	r0, r1
 8000462:	f200 80cb 	bhi.w	80005fc <__udivmoddi4+0x2c0>
 8000466:	4643      	mov	r3, r8
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1110 	mls	r1, r7, r0, r1
 8000474:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000478:	fb0e fe00 	mul.w	lr, lr, r0
 800047c:	45a6      	cmp	lr, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x156>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d202      	bcs.n	8000490 <__udivmoddi4+0x154>
 800048a:	45a6      	cmp	lr, r4
 800048c:	f200 80bb 	bhi.w	8000606 <__udivmoddi4+0x2ca>
 8000490:	4608      	mov	r0, r1
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049a:	e79c      	b.n	80003d6 <__udivmoddi4+0x9a>
 800049c:	f1c6 0720 	rsb	r7, r6, #32
 80004a0:	40b3      	lsls	r3, r6
 80004a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004aa:	fa20 f407 	lsr.w	r4, r0, r7
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	431c      	orrs	r4, r3
 80004b4:	40f9      	lsrs	r1, r7
 80004b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ba:	fa00 f306 	lsl.w	r3, r0, r6
 80004be:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c2:	0c20      	lsrs	r0, r4, #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fb09 1118 	mls	r1, r9, r8, r1
 80004cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d0:	fb08 f00e 	mul.w	r0, r8, lr
 80004d4:	4288      	cmp	r0, r1
 80004d6:	fa02 f206 	lsl.w	r2, r2, r6
 80004da:	d90b      	bls.n	80004f4 <__udivmoddi4+0x1b8>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e4:	f080 8088 	bcs.w	80005f8 <__udivmoddi4+0x2bc>
 80004e8:	4288      	cmp	r0, r1
 80004ea:	f240 8085 	bls.w	80005f8 <__udivmoddi4+0x2bc>
 80004ee:	f1a8 0802 	sub.w	r8, r8, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000500:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000504:	fb00 fe0e 	mul.w	lr, r0, lr
 8000508:	458e      	cmp	lr, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x1e2>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f100 34ff 	add.w	r4, r0, #4294967295
 8000514:	d26c      	bcs.n	80005f0 <__udivmoddi4+0x2b4>
 8000516:	458e      	cmp	lr, r1
 8000518:	d96a      	bls.n	80005f0 <__udivmoddi4+0x2b4>
 800051a:	3802      	subs	r0, #2
 800051c:	4461      	add	r1, ip
 800051e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000522:	fba0 9402 	umull	r9, r4, r0, r2
 8000526:	eba1 010e 	sub.w	r1, r1, lr
 800052a:	42a1      	cmp	r1, r4
 800052c:	46c8      	mov	r8, r9
 800052e:	46a6      	mov	lr, r4
 8000530:	d356      	bcc.n	80005e0 <__udivmoddi4+0x2a4>
 8000532:	d053      	beq.n	80005dc <__udivmoddi4+0x2a0>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x212>
 8000536:	ebb3 0208 	subs.w	r2, r3, r8
 800053a:	eb61 010e 	sbc.w	r1, r1, lr
 800053e:	fa01 f707 	lsl.w	r7, r1, r7
 8000542:	fa22 f306 	lsr.w	r3, r2, r6
 8000546:	40f1      	lsrs	r1, r6
 8000548:	431f      	orrs	r7, r3
 800054a:	e9c5 7100 	strd	r7, r1, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	40d8      	lsrs	r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa21 f303 	lsr.w	r3, r1, r3
 8000564:	4091      	lsls	r1, r2
 8000566:	4301      	orrs	r1, r0
 8000568:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800056c:	fa1f fe8c 	uxth.w	lr, ip
 8000570:	fbb3 f0f7 	udiv	r0, r3, r7
 8000574:	fb07 3610 	mls	r6, r7, r0, r3
 8000578:	0c0b      	lsrs	r3, r1, #16
 800057a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800057e:	fb00 f60e 	mul.w	r6, r0, lr
 8000582:	429e      	cmp	r6, r3
 8000584:	fa04 f402 	lsl.w	r4, r4, r2
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x260>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000592:	d22f      	bcs.n	80005f4 <__udivmoddi4+0x2b8>
 8000594:	429e      	cmp	r6, r3
 8000596:	d92d      	bls.n	80005f4 <__udivmoddi4+0x2b8>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1b9b      	subs	r3, r3, r6
 800059e:	b289      	uxth	r1, r1
 80005a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a4:	fb07 3316 	mls	r3, r7, r6, r3
 80005a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ac:	fb06 f30e 	mul.w	r3, r6, lr
 80005b0:	428b      	cmp	r3, r1
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x28a>
 80005b4:	eb1c 0101 	adds.w	r1, ip, r1
 80005b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005bc:	d216      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 80005be:	428b      	cmp	r3, r1
 80005c0:	d914      	bls.n	80005ec <__udivmoddi4+0x2b0>
 80005c2:	3e02      	subs	r6, #2
 80005c4:	4461      	add	r1, ip
 80005c6:	1ac9      	subs	r1, r1, r3
 80005c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005cc:	e738      	b.n	8000440 <__udivmoddi4+0x104>
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e705      	b.n	80003e0 <__udivmoddi4+0xa4>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e3      	b.n	80003a0 <__udivmoddi4+0x64>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6f8      	b.n	80003ce <__udivmoddi4+0x92>
 80005dc:	454b      	cmp	r3, r9
 80005de:	d2a9      	bcs.n	8000534 <__udivmoddi4+0x1f8>
 80005e0:	ebb9 0802 	subs.w	r8, r9, r2
 80005e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7a3      	b.n	8000534 <__udivmoddi4+0x1f8>
 80005ec:	4646      	mov	r6, r8
 80005ee:	e7ea      	b.n	80005c6 <__udivmoddi4+0x28a>
 80005f0:	4620      	mov	r0, r4
 80005f2:	e794      	b.n	800051e <__udivmoddi4+0x1e2>
 80005f4:	4640      	mov	r0, r8
 80005f6:	e7d1      	b.n	800059c <__udivmoddi4+0x260>
 80005f8:	46d0      	mov	r8, sl
 80005fa:	e77b      	b.n	80004f4 <__udivmoddi4+0x1b8>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	4461      	add	r1, ip
 8000600:	e732      	b.n	8000468 <__udivmoddi4+0x12c>
 8000602:	4630      	mov	r0, r6
 8000604:	e709      	b.n	800041a <__udivmoddi4+0xde>
 8000606:	4464      	add	r4, ip
 8000608:	3802      	subs	r0, #2
 800060a:	e742      	b.n	8000492 <__udivmoddi4+0x156>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <MX_ETH_Init+0x80>)
 8000616:	4a1f      	ldr	r2, [pc, #124]	; (8000694 <MX_ETH_Init+0x84>)
 8000618:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_ETH_Init+0x88>)
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_ETH_Init+0x88>)
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <MX_ETH_Init+0x88>)
 8000628:	22e1      	movs	r2, #225	; 0xe1
 800062a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_ETH_Init+0x88>)
 800062e:	2200      	movs	r2, #0
 8000630:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_ETH_Init+0x88>)
 8000634:	2200      	movs	r2, #0
 8000636:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_ETH_Init+0x88>)
 800063a:	2200      	movs	r2, #0
 800063c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_ETH_Init+0x80>)
 8000640:	4a15      	ldr	r2, [pc, #84]	; (8000698 <MX_ETH_Init+0x88>)
 8000642:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_ETH_Init+0x80>)
 8000646:	2201      	movs	r2, #1
 8000648:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_ETH_Init+0x80>)
 800064c:	4a13      	ldr	r2, [pc, #76]	; (800069c <MX_ETH_Init+0x8c>)
 800064e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_ETH_Init+0x80>)
 8000652:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <MX_ETH_Init+0x90>)
 8000654:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_ETH_Init+0x80>)
 8000658:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800065c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800065e:	480c      	ldr	r0, [pc, #48]	; (8000690 <MX_ETH_Init+0x80>)
 8000660:	f000 fda0 	bl	80011a4 <HAL_ETH_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800066a:	f000 fa67 	bl	8000b3c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800066e:	2238      	movs	r2, #56	; 0x38
 8000670:	2100      	movs	r1, #0
 8000672:	480c      	ldr	r0, [pc, #48]	; (80006a4 <MX_ETH_Init+0x94>)
 8000674:	f005 fadc 	bl	8005c30 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_ETH_Init+0x94>)
 800067a:	2221      	movs	r2, #33	; 0x21
 800067c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_ETH_Init+0x94>)
 8000680:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000684:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_ETH_Init+0x94>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	24000124 	.word	0x24000124
 8000694:	40028000 	.word	0x40028000
 8000698:	240001d4 	.word	0x240001d4
 800069c:	24000070 	.word	0x24000070
 80006a0:	24000010 	.word	0x24000010
 80006a4:	240000ec 	.word	0x240000ec

080006a8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08e      	sub	sp, #56	; 0x38
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a59      	ldr	r2, [pc, #356]	; (800082c <HAL_ETH_MspInit+0x184>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	f040 80ab 	bne.w	8000822 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80006cc:	4b58      	ldr	r3, [pc, #352]	; (8000830 <HAL_ETH_MspInit+0x188>)
 80006ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006d2:	4a57      	ldr	r2, [pc, #348]	; (8000830 <HAL_ETH_MspInit+0x188>)
 80006d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006dc:	4b54      	ldr	r3, [pc, #336]	; (8000830 <HAL_ETH_MspInit+0x188>)
 80006de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006e6:	623b      	str	r3, [r7, #32]
 80006e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006ea:	4b51      	ldr	r3, [pc, #324]	; (8000830 <HAL_ETH_MspInit+0x188>)
 80006ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006f0:	4a4f      	ldr	r2, [pc, #316]	; (8000830 <HAL_ETH_MspInit+0x188>)
 80006f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006fa:	4b4d      	ldr	r3, [pc, #308]	; (8000830 <HAL_ETH_MspInit+0x188>)
 80006fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000704:	61fb      	str	r3, [r7, #28]
 8000706:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000708:	4b49      	ldr	r3, [pc, #292]	; (8000830 <HAL_ETH_MspInit+0x188>)
 800070a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800070e:	4a48      	ldr	r2, [pc, #288]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000718:	4b45      	ldr	r3, [pc, #276]	; (8000830 <HAL_ETH_MspInit+0x188>)
 800071a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800071e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000722:	61bb      	str	r3, [r7, #24]
 8000724:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b42      	ldr	r3, [pc, #264]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072c:	4a40      	ldr	r2, [pc, #256]	; (8000830 <HAL_ETH_MspInit+0x188>)
 800072e:	f043 0304 	orr.w	r3, r3, #4
 8000732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000736:	4b3e      	ldr	r3, [pc, #248]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b3a      	ldr	r3, [pc, #232]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074a:	4a39      	ldr	r2, [pc, #228]	; (8000830 <HAL_ETH_MspInit+0x188>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000754:	4b36      	ldr	r3, [pc, #216]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b33      	ldr	r3, [pc, #204]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000768:	4a31      	ldr	r2, [pc, #196]	; (8000830 <HAL_ETH_MspInit+0x188>)
 800076a:	f043 0302 	orr.w	r3, r3, #2
 800076e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000772:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	f003 0302 	and.w	r3, r3, #2
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000780:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000786:	4a2a      	ldr	r2, [pc, #168]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800078c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800079e:	2332      	movs	r3, #50	; 0x32
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ae:	230b      	movs	r3, #11
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b6:	4619      	mov	r1, r3
 80007b8:	481e      	ldr	r0, [pc, #120]	; (8000834 <HAL_ETH_MspInit+0x18c>)
 80007ba:	f001 f917 	bl	80019ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007be:	2386      	movs	r3, #134	; 0x86
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ce:	230b      	movs	r3, #11
 80007d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d6:	4619      	mov	r1, r3
 80007d8:	4817      	ldr	r0, [pc, #92]	; (8000838 <HAL_ETH_MspInit+0x190>)
 80007da:	f001 f907 	bl	80019ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f0:	230b      	movs	r3, #11
 80007f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	4619      	mov	r1, r3
 80007fa:	4810      	ldr	r0, [pc, #64]	; (800083c <HAL_ETH_MspInit+0x194>)
 80007fc:	f001 f8f6 	bl	80019ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000800:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000812:	230b      	movs	r3, #11
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	4619      	mov	r1, r3
 800081c:	4808      	ldr	r0, [pc, #32]	; (8000840 <HAL_ETH_MspInit+0x198>)
 800081e:	f001 f8e5 	bl	80019ec <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000822:	bf00      	nop
 8000824:	3738      	adds	r7, #56	; 0x38
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40028000 	.word	0x40028000
 8000830:	58024400 	.word	0x58024400
 8000834:	58020800 	.word	0x58020800
 8000838:	58020000 	.word	0x58020000
 800083c:	58020400 	.word	0x58020400
 8000840:	58021800 	.word	0x58021800

08000844 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08c      	sub	sp, #48	; 0x30
 8000848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b71      	ldr	r3, [pc, #452]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 800085c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000860:	4a6f      	ldr	r2, [pc, #444]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800086a:	4b6d      	ldr	r3, [pc, #436]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	61bb      	str	r3, [r7, #24]
 8000876:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000878:	4b69      	ldr	r3, [pc, #420]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 800087a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087e:	4a68      	ldr	r2, [pc, #416]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000888:	4b65      	ldr	r3, [pc, #404]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b62      	ldr	r3, [pc, #392]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089c:	4a60      	ldr	r2, [pc, #384]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a6:	4b5e      	ldr	r3, [pc, #376]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b4:	4b5a      	ldr	r3, [pc, #360]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ba:	4a59      	ldr	r2, [pc, #356]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c4:	4b56      	ldr	r3, [pc, #344]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	4b53      	ldr	r3, [pc, #332]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d8:	4a51      	ldr	r2, [pc, #324]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e2:	4b4f      	ldr	r3, [pc, #316]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e8:	f003 0308 	and.w	r3, r3, #8
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f0:	4b4b      	ldr	r3, [pc, #300]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	4a4a      	ldr	r2, [pc, #296]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000900:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800090e:	4b44      	ldr	r3, [pc, #272]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	4a42      	ldr	r2, [pc, #264]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000916:	f043 0310 	orr.w	r3, r3, #16
 800091a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091e:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	f003 0310 	and.w	r3, r3, #16
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000932:	483c      	ldr	r0, [pc, #240]	; (8000a24 <MX_GPIO_Init+0x1e0>)
 8000934:	f001 fa02 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	483a      	ldr	r0, [pc, #232]	; (8000a28 <MX_GPIO_Init+0x1e4>)
 8000940:	f001 f9fc 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2102      	movs	r1, #2
 8000948:	4838      	ldr	r0, [pc, #224]	; (8000a2c <MX_GPIO_Init+0x1e8>)
 800094a:	f001 f9f7 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4833      	ldr	r0, [pc, #204]	; (8000a30 <MX_GPIO_Init+0x1ec>)
 8000964:	f001 f842 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000968:	f244 0301 	movw	r3, #16385	; 0x4001
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4828      	ldr	r0, [pc, #160]	; (8000a24 <MX_GPIO_Init+0x1e0>)
 8000982:	f001 f833 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4822      	ldr	r0, [pc, #136]	; (8000a28 <MX_GPIO_Init+0x1e4>)
 80009a0:	f001 f824 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	481e      	ldr	r0, [pc, #120]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 80009ba:	f001 f817 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4819      	ldr	r0, [pc, #100]	; (8000a38 <MX_GPIO_Init+0x1f4>)
 80009d4:	f001 f80a 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009ea:	230a      	movs	r3, #10
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4810      	ldr	r0, [pc, #64]	; (8000a38 <MX_GPIO_Init+0x1f4>)
 80009f6:	f000 fff9 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4806      	ldr	r0, [pc, #24]	; (8000a2c <MX_GPIO_Init+0x1e8>)
 8000a12:	f000 ffeb 	bl	80019ec <HAL_GPIO_Init>

}
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	; 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	58024400 	.word	0x58024400
 8000a24:	58020400 	.word	0x58020400
 8000a28:	58020c00 	.word	0x58020c00
 8000a2c:	58021000 	.word	0x58021000
 8000a30:	58020800 	.word	0x58020800
 8000a34:	58021800 	.word	0x58021800
 8000a38:	58020000 	.word	0x58020000

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a40:	f000 fa26 	bl	8000e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a44:	f000 f80a 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a48:	f7ff fefc 	bl	8000844 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a4c:	f7ff fde0 	bl	8000610 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a50:	f000 f936 	bl	8000cc0 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a54:	f000 f9ea 	bl	8000e2c <MX_USB_OTG_HS_USB_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <main+0x1c>
	...

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09c      	sub	sp, #112	; 0x70
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a66:	224c      	movs	r2, #76	; 0x4c
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f005 f8e0 	bl	8005c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2220      	movs	r2, #32
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f005 f8da 	bl	8005c30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f001 f977 	bl	8001d70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b2c      	ldr	r3, [pc, #176]	; (8000b38 <SystemClock_Config+0xdc>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4a2b      	ldr	r2, [pc, #172]	; (8000b38 <SystemClock_Config+0xdc>)
 8000a8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a90:	6193      	str	r3, [r2, #24]
 8000a92:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <SystemClock_Config+0xdc>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a9e:	bf00      	nop
 8000aa0:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <SystemClock_Config+0xdc>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aac:	d1f8      	bne.n	8000aa0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000aae:	2321      	movs	r3, #33	; 0x21
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ab2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abc:	2302      	movs	r3, #2
 8000abe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000ac8:	f240 1313 	movw	r3, #275	; 0x113
 8000acc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000ada:	2304      	movs	r3, #4
 8000adc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 f97a 	bl	8001de4 <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000af6:	f000 f821 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	233f      	movs	r3, #63	; 0x3f
 8000afc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afe:	2303      	movs	r3, #3
 8000b00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b06:	2308      	movs	r3, #8
 8000b08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b0a:	2340      	movs	r3, #64	; 0x40
 8000b0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b16:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b18:	2340      	movs	r3, #64	; 0x40
 8000b1a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2103      	movs	r1, #3
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 fd39 	bl	8002598 <HAL_RCC_ClockConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b2c:	f000 f806 	bl	8000b3c <Error_Handler>
  }
}
 8000b30:	bf00      	nop
 8000b32:	3770      	adds	r7, #112	; 0x70
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	58024800 	.word	0x58024800

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_MspInit+0x30>)
 8000b50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b54:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x30>)
 8000b56:	f043 0302 	orr.w	r3, r3, #2
 8000b5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x30>)
 8000b60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	58024400 	.word	0x58024400

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <NMI_Handler+0x4>

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <MemManage_Handler+0x4>

08000b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc8:	f000 f9d4 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <SystemInit+0xd0>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <SystemInit+0xd0>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000be4:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <SystemInit+0xd4>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f003 030f 	and.w	r3, r3, #15
 8000bec:	2b06      	cmp	r3, #6
 8000bee:	d807      	bhi.n	8000c00 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bf0:	4b2c      	ldr	r3, [pc, #176]	; (8000ca4 <SystemInit+0xd4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f023 030f 	bic.w	r3, r3, #15
 8000bf8:	4a2a      	ldr	r2, [pc, #168]	; (8000ca4 <SystemInit+0xd4>)
 8000bfa:	f043 0307 	orr.w	r3, r3, #7
 8000bfe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <SystemInit+0xd8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a28      	ldr	r2, [pc, #160]	; (8000ca8 <SystemInit+0xd8>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c0c:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <SystemInit+0xd8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <SystemInit+0xd8>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	4924      	ldr	r1, [pc, #144]	; (8000ca8 <SystemInit+0xd8>)
 8000c18:	4b24      	ldr	r3, [pc, #144]	; (8000cac <SystemInit+0xdc>)
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <SystemInit+0xd4>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0308 	and.w	r3, r3, #8
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d007      	beq.n	8000c3a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <SystemInit+0xd4>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f023 030f 	bic.w	r3, r3, #15
 8000c32:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <SystemInit+0xd4>)
 8000c34:	f043 0307 	orr.w	r3, r3, #7
 8000c38:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <SystemInit+0xd8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <SystemInit+0xd8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <SystemInit+0xd8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <SystemInit+0xd8>)
 8000c4e:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <SystemInit+0xe0>)
 8000c50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <SystemInit+0xd8>)
 8000c54:	4a17      	ldr	r2, [pc, #92]	; (8000cb4 <SystemInit+0xe4>)
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <SystemInit+0xd8>)
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <SystemInit+0xe8>)
 8000c5c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <SystemInit+0xd8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <SystemInit+0xd8>)
 8000c66:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <SystemInit+0xe8>)
 8000c68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <SystemInit+0xd8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c70:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <SystemInit+0xd8>)
 8000c72:	4a11      	ldr	r2, [pc, #68]	; (8000cb8 <SystemInit+0xe8>)
 8000c74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <SystemInit+0xd8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <SystemInit+0xd8>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <SystemInit+0xd8>)
 8000c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <SystemInit+0xd8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <SystemInit+0xec>)
 8000c90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c94:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00
 8000ca4:	52002000 	.word	0x52002000
 8000ca8:	58024400 	.word	0x58024400
 8000cac:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cb0:	02020200 	.word	0x02020200
 8000cb4:	01ff0000 	.word	0x01ff0000
 8000cb8:	01010280 	.word	0x01010280
 8000cbc:	52004000 	.word	0x52004000

08000cc0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000cc6:	4a23      	ldr	r2, [pc, #140]	; (8000d54 <MX_USART3_UART_Init+0x94>)
 8000cc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cca:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000ccc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d08:	4811      	ldr	r0, [pc, #68]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000d0a:	f003 fd93 	bl	8004834 <HAL_UART_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d14:	f7ff ff12 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	480d      	ldr	r0, [pc, #52]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000d1c:	f004 fe99 	bl	8005a52 <HAL_UARTEx_SetTxFifoThreshold>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d26:	f7ff ff09 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4808      	ldr	r0, [pc, #32]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000d2e:	f004 fece 	bl	8005ace <HAL_UARTEx_SetRxFifoThreshold>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d38:	f7ff ff00 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <MX_USART3_UART_Init+0x90>)
 8000d3e:	f004 fe4f 	bl	80059e0 <HAL_UARTEx_DisableFifoMode>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d48:	f7ff fef8 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	240001dc 	.word	0x240001dc
 8000d54:	40004800 	.word	0x40004800

08000d58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0b8      	sub	sp, #224	; 0xe0
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	22b8      	movs	r2, #184	; 0xb8
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f004 ff59 	bl	8005c30 <memset>
  if(uartHandle->Instance==USART3)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a27      	ldr	r2, [pc, #156]	; (8000e20 <HAL_UART_MspInit+0xc8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d146      	bne.n	8000e16 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d88:	f04f 0202 	mov.w	r2, #2
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f001 ff86 	bl	8002cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000daa:	f7ff fec7 	bl	8000b3c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <HAL_UART_MspInit+0xcc>)
 8000db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <HAL_UART_MspInit+0xcc>)
 8000db6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <HAL_UART_MspInit+0xcc>)
 8000dc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_UART_MspInit+0xcc>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd2:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <HAL_UART_MspInit+0xcc>)
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_UART_MspInit+0xcc>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de2:	f003 0308 	and.w	r3, r3, #8
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000dea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e04:	2307      	movs	r3, #7
 8000e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <HAL_UART_MspInit+0xd0>)
 8000e12:	f000 fdeb 	bl	80019ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e16:	bf00      	nop
 8000e18:	37e0      	adds	r7, #224	; 0xe0
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40004800 	.word	0x40004800
 8000e24:	58024400 	.word	0x58024400
 8000e28:	58020c00 	.word	0x58020c00

08000e2c <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e40:	f7ff fec6 	bl	8000bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e44:	480c      	ldr	r0, [pc, #48]	; (8000e78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e46:	490d      	ldr	r1, [pc, #52]	; (8000e7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e5c:	4c0a      	ldr	r4, [pc, #40]	; (8000e88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f004 febd 	bl	8005be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6e:	f7ff fde5 	bl	8000a3c <main>
  bx  lr
 8000e72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e74:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000e78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e7c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e80:	08005ca0 	.word	0x08005ca0
  ldr r2, =_sbss
 8000e84:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000e88:	24000274 	.word	0x24000274

08000e8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC3_IRQHandler>
	...

08000e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e96:	2003      	movs	r0, #3
 8000e98:	f000 f952 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e9c:	f001 fd32 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_Init+0x68>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	0a1b      	lsrs	r3, r3, #8
 8000ea8:	f003 030f 	and.w	r3, r3, #15
 8000eac:	4913      	ldr	r1, [pc, #76]	; (8000efc <HAL_Init+0x6c>)
 8000eae:	5ccb      	ldrb	r3, [r1, r3]
 8000eb0:	f003 031f 	and.w	r3, r3, #31
 8000eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_Init+0x68>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_Init+0x6c>)
 8000ec4:	5cd3      	ldrb	r3, [r2, r3]
 8000ec6:	f003 031f 	and.w	r3, r3, #31
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <HAL_Init+0x70>)
 8000ed2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <HAL_Init+0x74>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f814 	bl	8000f08 <HAL_InitTick>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e002      	b.n	8000ef0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000eea:	f7ff fe2d 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	08005c58 	.word	0x08005c58
 8000f00:	24000004 	.word	0x24000004
 8000f04:	24000000 	.word	0x24000000

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_InitTick+0x60>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d101      	bne.n	8000f1c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e021      	b.n	8000f60 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_InitTick+0x64>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_InitTick+0x60>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f929 	bl	800118a <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00e      	b.n	8000f60 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d80a      	bhi.n	8000f5e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f000 f901 	bl	8001156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <HAL_InitTick+0x68>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e000      	b.n	8000f60 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2400000c 	.word	0x2400000c
 8000f6c:	24000000 	.word	0x24000000
 8000f70:	24000008 	.word	0x24000008

08000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	2400000c 	.word	0x2400000c
 8000f98:	24000270 	.word	0x24000270

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	24000270 	.word	0x24000270

08000fb4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000fc4:	4904      	ldr	r1, [pc, #16]	; (8000fd8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	58000400 	.word	0x58000400

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <__NVIC_SetPriorityGrouping+0x40>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	4313      	orrs	r3, r2
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x40>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00
 8001020:	05fa0000 	.word	0x05fa0000

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f7ff ff8e 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff47 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001164:	f7ff ff5e 	bl	8001024 <__NVIC_GetPriorityGrouping>
 8001168:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff ff90 	bl	8001094 <NVIC_EncodePriority>
 8001174:	4602      	mov	r2, r0
 8001176:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff5f 	bl	8001040 <__NVIC_SetPriority>
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffb2 	bl	80010fc <SysTick_Config>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e0cf      	b.n	8001356 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d106      	bne.n	80011ce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2223      	movs	r2, #35	; 0x23
 80011c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff fa6d 	bl	80006a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	4b64      	ldr	r3, [pc, #400]	; (8001360 <HAL_ETH_Init+0x1bc>)
 80011d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011d4:	4a62      	ldr	r2, [pc, #392]	; (8001360 <HAL_ETH_Init+0x1bc>)
 80011d6:	f043 0302 	orr.w	r3, r3, #2
 80011da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011de:	4b60      	ldr	r3, [pc, #384]	; (8001360 <HAL_ETH_Init+0x1bc>)
 80011e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7a1b      	ldrb	r3, [r3, #8]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d103      	bne.n	80011fc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f7ff fedd 	bl	8000fb4 <HAL_SYSCFG_ETHInterfaceSelect>
 80011fa:	e003      	b.n	8001204 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80011fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001200:	f7ff fed8 	bl	8000fb4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001204:	4b57      	ldr	r3, [pc, #348]	; (8001364 <HAL_ETH_Init+0x1c0>)
 8001206:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	6812      	ldr	r2, [r2, #0]
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800121e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001220:	f7ff febc 	bl	8000f9c <HAL_GetTick>
 8001224:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001226:	e011      	b.n	800124c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001228:	f7ff feb8 	bl	8000f9c <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001236:	d909      	bls.n	800124c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2204      	movs	r2, #4
 800123c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	22e0      	movs	r2, #224	; 0xe0
 8001244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e084      	b.n	8001356 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1e4      	bne.n	8001228 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f886 	bl	8001370 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001264:	f001 fcc8 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8001268:	4603      	mov	r3, r0
 800126a:	4a3f      	ldr	r2, [pc, #252]	; (8001368 <HAL_ETH_Init+0x1c4>)
 800126c:	fba2 2303 	umull	r2, r3, r2, r3
 8001270:	0c9a      	lsrs	r2, r3, #18
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	3a01      	subs	r2, #1
 8001278:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 fa71 	bl	8001764 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800128a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800128e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800129a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800129e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d009      	beq.n	80012c2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	22e0      	movs	r2, #224	; 0xe0
 80012ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e049      	b.n	8001356 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <HAL_ETH_Init+0x1c8>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	6952      	ldr	r2, [r2, #20]
 80012d6:	0051      	lsls	r1, r2, #1
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	430b      	orrs	r3, r1
 80012de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012e2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 fad9 	bl	800189e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 fb1f 	bl	8001930 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	3305      	adds	r3, #5
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	021a      	lsls	r2, r3, #8
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	3304      	adds	r3, #4
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	3303      	adds	r3, #3
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	061a      	lsls	r2, r3, #24
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	3302      	adds	r3, #2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	041b      	lsls	r3, r3, #16
 8001324:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	3301      	adds	r3, #1
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001330:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800133e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001340:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2210      	movs	r2, #16
 8001350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	58024400 	.word	0x58024400
 8001364:	58000400 	.word	0x58000400
 8001368:	431bde83 	.word	0x431bde83
 800136c:	ffff8001 	.word	0xffff8001

08001370 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001380:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001388:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800138a:	f001 fc35 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 800138e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4a1e      	ldr	r2, [pc, #120]	; (800140c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d908      	bls.n	80013aa <HAL_ETH_SetMDIOClockRange+0x3a>
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d804      	bhi.n	80013aa <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	e027      	b.n	80013fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	4a18      	ldr	r2, [pc, #96]	; (8001410 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d908      	bls.n	80013c4 <HAL_ETH_SetMDIOClockRange+0x54>
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	4a17      	ldr	r2, [pc, #92]	; (8001414 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d204      	bcs.n	80013c4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	e01a      	b.n	80013fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d303      	bcc.n	80013d4 <HAL_ETH_SetMDIOClockRange+0x64>
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d911      	bls.n	80013f8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4a10      	ldr	r2, [pc, #64]	; (8001418 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d908      	bls.n	80013ee <HAL_ETH_SetMDIOClockRange+0x7e>
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <HAL_ETH_SetMDIOClockRange+0xac>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d804      	bhi.n	80013ee <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	e005      	b.n	80013fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	e000      	b.n	80013fa <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80013f8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	01312cff 	.word	0x01312cff
 8001410:	02160ebf 	.word	0x02160ebf
 8001414:	03938700 	.word	0x03938700
 8001418:	05f5e0ff 	.word	0x05f5e0ff
 800141c:	08f0d17f 	.word	0x08f0d17f

08001420 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001432:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	791b      	ldrb	r3, [r3, #4]
 8001438:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800143a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	7b1b      	ldrb	r3, [r3, #12]
 8001440:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001442:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	7b5b      	ldrb	r3, [r3, #13]
 8001448:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800144a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	7b9b      	ldrb	r3, [r3, #14]
 8001450:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001452:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	7bdb      	ldrb	r3, [r3, #15]
 8001458:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800145a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	7c12      	ldrb	r2, [r2, #16]
 8001460:	2a00      	cmp	r2, #0
 8001462:	d102      	bne.n	800146a <ETH_SetMACConfig+0x4a>
 8001464:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001468:	e000      	b.n	800146c <ETH_SetMACConfig+0x4c>
 800146a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800146c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	7c52      	ldrb	r2, [r2, #17]
 8001472:	2a00      	cmp	r2, #0
 8001474:	d102      	bne.n	800147c <ETH_SetMACConfig+0x5c>
 8001476:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800147a:	e000      	b.n	800147e <ETH_SetMACConfig+0x5e>
 800147c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800147e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	7c9b      	ldrb	r3, [r3, #18]
 8001484:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001486:	431a      	orrs	r2, r3
               macconf->Speed |
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800148c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001492:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	7f1b      	ldrb	r3, [r3, #28]
 8001498:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800149a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	7f5b      	ldrb	r3, [r3, #29]
 80014a0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80014a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	7f92      	ldrb	r2, [r2, #30]
 80014a8:	2a00      	cmp	r2, #0
 80014aa:	d102      	bne.n	80014b2 <ETH_SetMACConfig+0x92>
 80014ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b0:	e000      	b.n	80014b4 <ETH_SetMACConfig+0x94>
 80014b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80014b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	7fdb      	ldrb	r3, [r3, #31]
 80014ba:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80014bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80014c4:	2a00      	cmp	r2, #0
 80014c6:	d102      	bne.n	80014ce <ETH_SetMACConfig+0xae>
 80014c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014cc:	e000      	b.n	80014d0 <ETH_SetMACConfig+0xb0>
 80014ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80014d0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80014d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014de:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80014e0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b56      	ldr	r3, [pc, #344]	; (800164c <ETH_SetMACConfig+0x22c>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	68f9      	ldr	r1, [r7, #12]
 80014fa:	430b      	orrs	r3, r1
 80014fc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001502:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800150a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800150c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001514:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001516:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800151e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001520:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001528:	2a00      	cmp	r2, #0
 800152a:	d102      	bne.n	8001532 <ETH_SetMACConfig+0x112>
 800152c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001530:	e000      	b.n	8001534 <ETH_SetMACConfig+0x114>
 8001532:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001534:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800153a:	4313      	orrs	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	4b42      	ldr	r3, [pc, #264]	; (8001650 <ETH_SetMACConfig+0x230>)
 8001546:	4013      	ands	r3, r2
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	68f9      	ldr	r1, [r7, #12]
 800154e:	430b      	orrs	r3, r1
 8001550:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001558:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800155e:	4313      	orrs	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	4b3a      	ldr	r3, [pc, #232]	; (8001654 <ETH_SetMACConfig+0x234>)
 800156a:	4013      	ands	r3, r2
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	68f9      	ldr	r1, [r7, #12]
 8001572:	430b      	orrs	r3, r1
 8001574:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800157c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001582:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800158a:	2a00      	cmp	r2, #0
 800158c:	d101      	bne.n	8001592 <ETH_SetMACConfig+0x172>
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	e000      	b.n	8001594 <ETH_SetMACConfig+0x174>
 8001592:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001594:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800159a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800159c:	4313      	orrs	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80015a6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80015aa:	4013      	ands	r3, r2
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	68f9      	ldr	r1, [r7, #12]
 80015b2:	430b      	orrs	r3, r1
 80015b4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80015bc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80015c4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80015c6:	4313      	orrs	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d2:	f023 0103 	bic.w	r1, r3, #3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	430a      	orrs	r2, r1
 80015de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80015ea:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001606:	2a00      	cmp	r2, #0
 8001608:	d101      	bne.n	800160e <ETH_SetMACConfig+0x1ee>
 800160a:	2240      	movs	r2, #64	; 0x40
 800160c:	e000      	b.n	8001610 <ETH_SetMACConfig+0x1f0>
 800160e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001610:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001618:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800161a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001622:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001624:	4313      	orrs	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001630:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	430a      	orrs	r2, r1
 800163c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	00048083 	.word	0x00048083
 8001650:	c0f88000 	.word	0xc0f88000
 8001654:	fffffef0 	.word	0xfffffef0

08001658 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b38      	ldr	r3, [pc, #224]	; (8001750 <ETH_SetDMAConfig+0xf8>)
 800166e:	4013      	ands	r3, r2
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	6811      	ldr	r1, [r2, #0]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	430b      	orrs	r3, r1
 800167a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800167e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	791b      	ldrb	r3, [r3, #4]
 8001684:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800168a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	7b1b      	ldrb	r3, [r3, #12]
 8001690:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001692:	4313      	orrs	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <ETH_SetDMAConfig+0xfc>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	68f9      	ldr	r1, [r7, #12]
 80016aa:	430b      	orrs	r3, r1
 80016ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016b0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	7b5b      	ldrb	r3, [r3, #13]
 80016b6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80016bc:	4313      	orrs	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <ETH_SetDMAConfig+0x100>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	68f9      	ldr	r1, [r7, #12]
 80016d6:	430b      	orrs	r3, r1
 80016d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016dc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	7d1b      	ldrb	r3, [r3, #20]
 80016e8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80016ea:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	7f5b      	ldrb	r3, [r3, #29]
 80016f0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016fe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <ETH_SetDMAConfig+0x104>)
 8001704:	4013      	ands	r3, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	68f9      	ldr	r1, [r7, #12]
 800170c:	430b      	orrs	r3, r1
 800170e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001712:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	7f1b      	ldrb	r3, [r3, #28]
 800171a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001720:	4313      	orrs	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800172c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <ETH_SetDMAConfig+0x108>)
 8001732:	4013      	ands	r3, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	68f9      	ldr	r1, [r7, #12]
 800173a:	430b      	orrs	r3, r1
 800173c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001740:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	ffff87fd 	.word	0xffff87fd
 8001754:	ffff2ffe 	.word	0xffff2ffe
 8001758:	fffec000 	.word	0xfffec000
 800175c:	ffc0efef 	.word	0xffc0efef
 8001760:	7fc0ffff 	.word	0x7fc0ffff

08001764 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b0a4      	sub	sp, #144	; 0x90
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800176c:	2301      	movs	r3, #1
 800176e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001772:	2300      	movs	r3, #0
 8001774:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001782:	2301      	movs	r3, #1
 8001784:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001788:	2301      	movs	r3, #1
 800178a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800178e:	2301      	movs	r3, #1
 8001790:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800179a:	2301      	movs	r3, #1
 800179c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80017a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80017bc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80017c0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80017de:	2300      	movs	r3, #0
 80017e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80017e6:	2300      	movs	r3, #0
 80017e8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80017f6:	2301      	movs	r3, #1
 80017f8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80017fc:	2320      	movs	r3, #32
 80017fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001802:	2301      	movs	r3, #1
 8001804:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800180e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001814:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001818:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001820:	2302      	movs	r3, #2
 8001822:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001838:	2301      	movs	r3, #1
 800183a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800183e:	2300      	movs	r3, #0
 8001840:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001842:	2301      	movs	r3, #1
 8001844:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184c:	4619      	mov	r1, r3
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fde6 	bl	8001420 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001854:	2301      	movs	r3, #1
 8001856:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001858:	2301      	movs	r3, #1
 800185a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800186e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001872:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001878:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800187c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001884:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	4619      	mov	r1, r3
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fee1 	bl	8001658 <ETH_SetDMAConfig>
}
 8001896:	bf00      	nop
 8001898:	3790      	adds	r7, #144	; 0x90
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800189e:	b480      	push	{r7}
 80018a0:	b085      	sub	sp, #20
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	e01d      	b.n	80018e8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68d9      	ldr	r1, [r3, #12]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	440b      	add	r3, r1
 80018bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2200      	movs	r2, #0
 80018c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018d6:	68b9      	ldr	r1, [r7, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	3206      	adds	r2, #6
 80018de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3301      	adds	r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d9de      	bls.n	80018ac <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fc:	461a      	mov	r2, r3
 80018fe:	2303      	movs	r3, #3
 8001900:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001910:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001920:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e023      	b.n	8001986 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6919      	ldr	r1, [r3, #16]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	440b      	add	r3, r1
 800194e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2200      	movs	r2, #0
 800195a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2200      	movs	r2, #0
 8001966:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2200      	movs	r2, #0
 8001972:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	3212      	adds	r2, #18
 800197c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3301      	adds	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d9d8      	bls.n	800193e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b2:	461a      	mov	r2, r3
 80019b4:	2303      	movs	r3, #3
 80019b6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019da:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80019fa:	4b86      	ldr	r3, [pc, #536]	; (8001c14 <HAL_GPIO_Init+0x228>)
 80019fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019fe:	e18c      	b.n	8001d1a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2101      	movs	r1, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 817e 	beq.w	8001d14 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d005      	beq.n	8001a30 <HAL_GPIO_Init+0x44>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d130      	bne.n	8001a92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a66:	2201      	movs	r2, #1
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	f003 0201 	and.w	r2, r3, #1
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d017      	beq.n	8001ace <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d123      	bne.n	8001b22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	08da      	lsrs	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3208      	adds	r2, #8
 8001ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	220f      	movs	r2, #15
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	08da      	lsrs	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3208      	adds	r2, #8
 8001b1c:	69b9      	ldr	r1, [r7, #24]
 8001b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0203 	and.w	r2, r3, #3
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 80d8 	beq.w	8001d14 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b64:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <HAL_GPIO_Init+0x22c>)
 8001b66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b6a:	4a2b      	ldr	r2, [pc, #172]	; (8001c18 <HAL_GPIO_Init+0x22c>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b74:	4b28      	ldr	r3, [pc, #160]	; (8001c18 <HAL_GPIO_Init+0x22c>)
 8001b76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b82:	4a26      	ldr	r2, [pc, #152]	; (8001c1c <HAL_GPIO_Init+0x230>)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	220f      	movs	r2, #15
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a1d      	ldr	r2, [pc, #116]	; (8001c20 <HAL_GPIO_Init+0x234>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d04a      	beq.n	8001c44 <HAL_GPIO_Init+0x258>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <HAL_GPIO_Init+0x238>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d02b      	beq.n	8001c0e <HAL_GPIO_Init+0x222>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a1b      	ldr	r2, [pc, #108]	; (8001c28 <HAL_GPIO_Init+0x23c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d025      	beq.n	8001c0a <HAL_GPIO_Init+0x21e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a1a      	ldr	r2, [pc, #104]	; (8001c2c <HAL_GPIO_Init+0x240>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d01f      	beq.n	8001c06 <HAL_GPIO_Init+0x21a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <HAL_GPIO_Init+0x244>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d019      	beq.n	8001c02 <HAL_GPIO_Init+0x216>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a18      	ldr	r2, [pc, #96]	; (8001c34 <HAL_GPIO_Init+0x248>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_GPIO_Init+0x212>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <HAL_GPIO_Init+0x24c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00d      	beq.n	8001bfa <HAL_GPIO_Init+0x20e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a16      	ldr	r2, [pc, #88]	; (8001c3c <HAL_GPIO_Init+0x250>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d007      	beq.n	8001bf6 <HAL_GPIO_Init+0x20a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a15      	ldr	r2, [pc, #84]	; (8001c40 <HAL_GPIO_Init+0x254>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d101      	bne.n	8001bf2 <HAL_GPIO_Init+0x206>
 8001bee:	2309      	movs	r3, #9
 8001bf0:	e029      	b.n	8001c46 <HAL_GPIO_Init+0x25a>
 8001bf2:	230a      	movs	r3, #10
 8001bf4:	e027      	b.n	8001c46 <HAL_GPIO_Init+0x25a>
 8001bf6:	2307      	movs	r3, #7
 8001bf8:	e025      	b.n	8001c46 <HAL_GPIO_Init+0x25a>
 8001bfa:	2306      	movs	r3, #6
 8001bfc:	e023      	b.n	8001c46 <HAL_GPIO_Init+0x25a>
 8001bfe:	2305      	movs	r3, #5
 8001c00:	e021      	b.n	8001c46 <HAL_GPIO_Init+0x25a>
 8001c02:	2304      	movs	r3, #4
 8001c04:	e01f      	b.n	8001c46 <HAL_GPIO_Init+0x25a>
 8001c06:	2303      	movs	r3, #3
 8001c08:	e01d      	b.n	8001c46 <HAL_GPIO_Init+0x25a>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e01b      	b.n	8001c46 <HAL_GPIO_Init+0x25a>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e019      	b.n	8001c46 <HAL_GPIO_Init+0x25a>
 8001c12:	bf00      	nop
 8001c14:	58000080 	.word	0x58000080
 8001c18:	58024400 	.word	0x58024400
 8001c1c:	58000400 	.word	0x58000400
 8001c20:	58020000 	.word	0x58020000
 8001c24:	58020400 	.word	0x58020400
 8001c28:	58020800 	.word	0x58020800
 8001c2c:	58020c00 	.word	0x58020c00
 8001c30:	58021000 	.word	0x58021000
 8001c34:	58021400 	.word	0x58021400
 8001c38:	58021800 	.word	0x58021800
 8001c3c:	58021c00 	.word	0x58021c00
 8001c40:	58022400 	.word	0x58022400
 8001c44:	2300      	movs	r3, #0
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	f002 0203 	and.w	r2, r2, #3
 8001c4c:	0092      	lsls	r2, r2, #2
 8001c4e:	4093      	lsls	r3, r2
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c56:	4938      	ldr	r1, [pc, #224]	; (8001d38 <HAL_GPIO_Init+0x34c>)
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	3301      	adds	r3, #1
 8001d18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f47f ae6b 	bne.w	8001a00 <HAL_GPIO_Init+0x14>
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	bf00      	nop
 8001d2e:	3724      	adds	r7, #36	; 0x24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	58000400 	.word	0x58000400

08001d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d4c:	787b      	ldrb	r3, [r7, #1]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d58:	e003      	b.n	8001d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d5a:	887b      	ldrh	r3, [r7, #2]
 8001d5c:	041a      	lsls	r2, r3, #16
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	619a      	str	r2, [r3, #24]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_PWREx_ConfigSupply+0x70>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d00a      	beq.n	8001d9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <HAL_PWREx_ConfigSupply+0x70>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d001      	beq.n	8001d96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e01f      	b.n	8001dd6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e01d      	b.n	8001dd6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_PWREx_ConfigSupply+0x70>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f023 0207 	bic.w	r2, r3, #7
 8001da2:	490f      	ldr	r1, [pc, #60]	; (8001de0 <HAL_PWREx_ConfigSupply+0x70>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001daa:	f7ff f8f7 	bl	8000f9c <HAL_GetTick>
 8001dae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001db0:	e009      	b.n	8001dc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001db2:	f7ff f8f3 	bl	8000f9c <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dc0:	d901      	bls.n	8001dc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e007      	b.n	8001dd6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_PWREx_ConfigSupply+0x70>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dd2:	d1ee      	bne.n	8001db2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	58024800 	.word	0x58024800

08001de4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08c      	sub	sp, #48	; 0x30
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e3c8      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8087 	beq.w	8001f12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e04:	4b88      	ldr	r3, [pc, #544]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e0e:	4b86      	ldr	r3, [pc, #536]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e16:	2b10      	cmp	r3, #16
 8001e18:	d007      	beq.n	8001e2a <HAL_RCC_OscConfig+0x46>
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1c:	2b18      	cmp	r3, #24
 8001e1e:	d110      	bne.n	8001e42 <HAL_RCC_OscConfig+0x5e>
 8001e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d10b      	bne.n	8001e42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2a:	4b7f      	ldr	r3, [pc, #508]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d06c      	beq.n	8001f10 <HAL_RCC_OscConfig+0x12c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d168      	bne.n	8001f10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e3a2      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_OscConfig+0x76>
 8001e4c:	4b76      	ldr	r3, [pc, #472]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a75      	ldr	r2, [pc, #468]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	e02e      	b.n	8001eb8 <HAL_RCC_OscConfig+0xd4>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x98>
 8001e62:	4b71      	ldr	r3, [pc, #452]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a70      	ldr	r2, [pc, #448]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b6e      	ldr	r3, [pc, #440]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a6d      	ldr	r2, [pc, #436]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e01d      	b.n	8001eb8 <HAL_RCC_OscConfig+0xd4>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0xbc>
 8001e86:	4b68      	ldr	r3, [pc, #416]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a67      	ldr	r2, [pc, #412]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4b65      	ldr	r3, [pc, #404]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a64      	ldr	r2, [pc, #400]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e00b      	b.n	8001eb8 <HAL_RCC_OscConfig+0xd4>
 8001ea0:	4b61      	ldr	r3, [pc, #388]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a60      	ldr	r2, [pc, #384]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b5e      	ldr	r3, [pc, #376]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a5d      	ldr	r2, [pc, #372]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d013      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f86c 	bl	8000f9c <HAL_GetTick>
 8001ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff f868 	bl	8000f9c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e356      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eda:	4b53      	ldr	r3, [pc, #332]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0xe4>
 8001ee6:	e014      	b.n	8001f12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7ff f858 	bl	8000f9c <HAL_GetTick>
 8001eec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff f854 	bl	8000f9c <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	; 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e342      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f02:	4b49      	ldr	r3, [pc, #292]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x10c>
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 808c 	beq.w	8002038 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f20:	4b41      	ldr	r3, [pc, #260]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f2a:	4b3f      	ldr	r3, [pc, #252]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <HAL_RCC_OscConfig+0x162>
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	2b18      	cmp	r3, #24
 8001f3a:	d137      	bne.n	8001fac <HAL_RCC_OscConfig+0x1c8>
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d132      	bne.n	8001fac <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f46:	4b38      	ldr	r3, [pc, #224]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_RCC_OscConfig+0x17a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e314      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f5e:	4b32      	ldr	r3, [pc, #200]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 0219 	bic.w	r2, r3, #25
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	492f      	ldr	r1, [pc, #188]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff f814 	bl	8000f9c <HAL_GetTick>
 8001f74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f78:	f7ff f810 	bl	8000f9c <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e2fe      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f8a:	4b27      	ldr	r3, [pc, #156]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	061b      	lsls	r3, r3, #24
 8001fa4:	4920      	ldr	r1, [pc, #128]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001faa:	e045      	b.n	8002038 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d026      	beq.n	8002002 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 0219 	bic.w	r2, r3, #25
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4919      	ldr	r1, [pc, #100]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7fe ffe9 	bl	8000f9c <HAL_GetTick>
 8001fca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fce:	f7fe ffe5 	bl	8000f9c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e2d3      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fec:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	061b      	lsls	r3, r3, #24
 8001ffa:	490b      	ldr	r1, [pc, #44]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
 8002000:	e01a      	b.n	8002038 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a08      	ldr	r2, [pc, #32]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7fe ffc5 	bl	8000f9c <HAL_GetTick>
 8002012:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002016:	f7fe ffc1 	bl	8000f9c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d903      	bls.n	800202c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e2af      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
 8002028:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800202c:	4b96      	ldr	r3, [pc, #600]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1ee      	bne.n	8002016 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b00      	cmp	r3, #0
 8002042:	d06a      	beq.n	800211a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002044:	4b90      	ldr	r3, [pc, #576]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800204c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800204e:	4b8e      	ldr	r3, [pc, #568]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2b08      	cmp	r3, #8
 8002058:	d007      	beq.n	800206a <HAL_RCC_OscConfig+0x286>
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	2b18      	cmp	r3, #24
 800205e:	d11b      	bne.n	8002098 <HAL_RCC_OscConfig+0x2b4>
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b01      	cmp	r3, #1
 8002068:	d116      	bne.n	8002098 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800206a:	4b87      	ldr	r3, [pc, #540]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <HAL_RCC_OscConfig+0x29e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	2b80      	cmp	r3, #128	; 0x80
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e282      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002082:	4b81      	ldr	r3, [pc, #516]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	061b      	lsls	r3, r3, #24
 8002090:	497d      	ldr	r1, [pc, #500]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002096:	e040      	b.n	800211a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d023      	beq.n	80020e8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80020a0:	4b79      	ldr	r3, [pc, #484]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a78      	ldr	r2, [pc, #480]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 80020a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7fe ff76 	bl	8000f9c <HAL_GetTick>
 80020b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020b4:	f7fe ff72 	bl	8000f9c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e260      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020c6:	4b70      	ldr	r3, [pc, #448]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020d2:	4b6d      	ldr	r3, [pc, #436]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	061b      	lsls	r3, r3, #24
 80020e0:	4969      	ldr	r1, [pc, #420]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60cb      	str	r3, [r1, #12]
 80020e6:	e018      	b.n	800211a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020e8:	4b67      	ldr	r3, [pc, #412]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a66      	ldr	r2, [pc, #408]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 80020ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7fe ff52 	bl	8000f9c <HAL_GetTick>
 80020f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020fc:	f7fe ff4e 	bl	8000f9c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e23c      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800210e:	4b5e      	ldr	r3, [pc, #376]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d036      	beq.n	8002194 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d019      	beq.n	8002162 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212e:	4b56      	ldr	r3, [pc, #344]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 8002130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002132:	4a55      	ldr	r2, [pc, #340]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213a:	f7fe ff2f 	bl	8000f9c <HAL_GetTick>
 800213e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002142:	f7fe ff2b 	bl	8000f9c <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e219      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002154:	4b4c      	ldr	r3, [pc, #304]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 8002156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x35e>
 8002160:	e018      	b.n	8002194 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002162:	4b49      	ldr	r3, [pc, #292]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 8002164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002166:	4a48      	ldr	r2, [pc, #288]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216e:	f7fe ff15 	bl	8000f9c <HAL_GetTick>
 8002172:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002176:	f7fe ff11 	bl	8000f9c <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e1ff      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002188:	4b3f      	ldr	r3, [pc, #252]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 800218a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f0      	bne.n	8002176 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d036      	beq.n	800220e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d019      	beq.n	80021dc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021a8:	4b37      	ldr	r3, [pc, #220]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a36      	ldr	r2, [pc, #216]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 80021ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021b4:	f7fe fef2 	bl	8000f9c <HAL_GetTick>
 80021b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021bc:	f7fe feee 	bl	8000f9c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e1dc      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021ce:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x3d8>
 80021da:	e018      	b.n	800220e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021dc:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a29      	ldr	r2, [pc, #164]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 80021e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021e8:	f7fe fed8 	bl	8000f9c <HAL_GetTick>
 80021ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021f0:	f7fe fed4 	bl	8000f9c <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1c2      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002202:	4b21      	ldr	r3, [pc, #132]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8086 	beq.w	8002328 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800221c:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_RCC_OscConfig+0x4a8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1a      	ldr	r2, [pc, #104]	; (800228c <HAL_RCC_OscConfig+0x4a8>)
 8002222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002226:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002228:	f7fe feb8 	bl	8000f9c <HAL_GetTick>
 800222c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002230:	f7fe feb4 	bl	8000f9c <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	; 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e1a2      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_RCC_OscConfig+0x4a8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d106      	bne.n	8002264 <HAL_RCC_OscConfig+0x480>
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225a:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6713      	str	r3, [r2, #112]	; 0x70
 8002262:	e032      	b.n	80022ca <HAL_RCC_OscConfig+0x4e6>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d111      	bne.n	8002290 <HAL_RCC_OscConfig+0x4ac>
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	4a05      	ldr	r2, [pc, #20]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 8002272:	f023 0301 	bic.w	r3, r3, #1
 8002276:	6713      	str	r3, [r2, #112]	; 0x70
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	4a02      	ldr	r2, [pc, #8]	; (8002288 <HAL_RCC_OscConfig+0x4a4>)
 800227e:	f023 0304 	bic.w	r3, r3, #4
 8002282:	6713      	str	r3, [r2, #112]	; 0x70
 8002284:	e021      	b.n	80022ca <HAL_RCC_OscConfig+0x4e6>
 8002286:	bf00      	nop
 8002288:	58024400 	.word	0x58024400
 800228c:	58024800 	.word	0x58024800
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b05      	cmp	r3, #5
 8002296:	d10c      	bne.n	80022b2 <HAL_RCC_OscConfig+0x4ce>
 8002298:	4b83      	ldr	r3, [pc, #524]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	4a82      	ldr	r2, [pc, #520]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	6713      	str	r3, [r2, #112]	; 0x70
 80022a4:	4b80      	ldr	r3, [pc, #512]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	4a7f      	ldr	r2, [pc, #508]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6713      	str	r3, [r2, #112]	; 0x70
 80022b0:	e00b      	b.n	80022ca <HAL_RCC_OscConfig+0x4e6>
 80022b2:	4b7d      	ldr	r3, [pc, #500]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	4a7c      	ldr	r2, [pc, #496]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6713      	str	r3, [r2, #112]	; 0x70
 80022be:	4b7a      	ldr	r3, [pc, #488]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	4a79      	ldr	r2, [pc, #484]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 80022c4:	f023 0304 	bic.w	r3, r3, #4
 80022c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d015      	beq.n	80022fe <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d2:	f7fe fe63 	bl	8000f9c <HAL_GetTick>
 80022d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7fe fe5f 	bl	8000f9c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e14b      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022f0:	4b6d      	ldr	r3, [pc, #436]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 80022f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0ee      	beq.n	80022da <HAL_RCC_OscConfig+0x4f6>
 80022fc:	e014      	b.n	8002328 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fe:	f7fe fe4d 	bl	8000f9c <HAL_GetTick>
 8002302:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe fe49 	bl	8000f9c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e135      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800231c:	4b62      	ldr	r3, [pc, #392]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ee      	bne.n	8002306 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 812a 	beq.w	8002586 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002332:	4b5d      	ldr	r3, [pc, #372]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800233a:	2b18      	cmp	r3, #24
 800233c:	f000 80ba 	beq.w	80024b4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	2b02      	cmp	r3, #2
 8002346:	f040 8095 	bne.w	8002474 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234a:	4b57      	ldr	r3, [pc, #348]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a56      	ldr	r2, [pc, #344]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 8002350:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe fe21 	bl	8000f9c <HAL_GetTick>
 800235a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235e:	f7fe fe1d 	bl	8000f9c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e10b      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002370:	4b4d      	ldr	r3, [pc, #308]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f0      	bne.n	800235e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800237c:	4b4a      	ldr	r3, [pc, #296]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 800237e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002380:	4b4a      	ldr	r3, [pc, #296]	; (80024ac <HAL_RCC_OscConfig+0x6c8>)
 8002382:	4013      	ands	r3, r2
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800238c:	0112      	lsls	r2, r2, #4
 800238e:	430a      	orrs	r2, r1
 8002390:	4945      	ldr	r1, [pc, #276]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 8002392:	4313      	orrs	r3, r2
 8002394:	628b      	str	r3, [r1, #40]	; 0x28
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	3b01      	subs	r3, #1
 800239c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a4:	3b01      	subs	r3, #1
 80023a6:	025b      	lsls	r3, r3, #9
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	3b01      	subs	r3, #1
 80023b2:	041b      	lsls	r3, r3, #16
 80023b4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	3b01      	subs	r3, #1
 80023c0:	061b      	lsls	r3, r3, #24
 80023c2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80023c6:	4938      	ldr	r1, [pc, #224]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80023cc:	4b36      	ldr	r3, [pc, #216]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	4a35      	ldr	r2, [pc, #212]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023d8:	4b33      	ldr	r3, [pc, #204]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 80023da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023dc:	4b34      	ldr	r3, [pc, #208]	; (80024b0 <HAL_RCC_OscConfig+0x6cc>)
 80023de:	4013      	ands	r3, r2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023e4:	00d2      	lsls	r2, r2, #3
 80023e6:	4930      	ldr	r1, [pc, #192]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023ec:	4b2e      	ldr	r3, [pc, #184]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	f023 020c 	bic.w	r2, r3, #12
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	492b      	ldr	r1, [pc, #172]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80023fe:	4b2a      	ldr	r3, [pc, #168]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	f023 0202 	bic.w	r2, r3, #2
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	4927      	ldr	r1, [pc, #156]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 800240c:	4313      	orrs	r3, r2
 800240e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	4a24      	ldr	r2, [pc, #144]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 8002416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800241c:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	4a21      	ldr	r2, [pc, #132]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 8002422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002426:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002428:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 800242e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002432:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002434:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a18      	ldr	r2, [pc, #96]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 8002446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7fe fda6 	bl	8000f9c <HAL_GetTick>
 8002450:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fda2 	bl	8000f9c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e090      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x670>
 8002472:	e088      	b.n	8002586 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 800247a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800247e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7fe fd8c 	bl	8000f9c <HAL_GetTick>
 8002484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe fd88 	bl	8000f9c <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e076      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800249a:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_RCC_OscConfig+0x6c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x6a4>
 80024a6:	e06e      	b.n	8002586 <HAL_RCC_OscConfig+0x7a2>
 80024a8:	58024400 	.word	0x58024400
 80024ac:	fffffc0c 	.word	0xfffffc0c
 80024b0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80024b4:	4b36      	ldr	r3, [pc, #216]	; (8002590 <HAL_RCC_OscConfig+0x7ac>)
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024ba:	4b35      	ldr	r3, [pc, #212]	; (8002590 <HAL_RCC_OscConfig+0x7ac>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d031      	beq.n	800252c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f003 0203 	and.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d12a      	bne.n	800252c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d122      	bne.n	800252c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d11a      	bne.n	800252c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	0a5b      	lsrs	r3, r3, #9
 80024fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002502:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d111      	bne.n	800252c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	0c1b      	lsrs	r3, r3, #16
 800250c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d108      	bne.n	800252c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	0e1b      	lsrs	r3, r3, #24
 800251e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e02b      	b.n	8002588 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002530:	4b17      	ldr	r3, [pc, #92]	; (8002590 <HAL_RCC_OscConfig+0x7ac>)
 8002532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002534:	08db      	lsrs	r3, r3, #3
 8002536:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800253a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	429a      	cmp	r2, r3
 8002544:	d01f      	beq.n	8002586 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_RCC_OscConfig+0x7ac>)
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	4a11      	ldr	r2, [pc, #68]	; (8002590 <HAL_RCC_OscConfig+0x7ac>)
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002552:	f7fe fd23 	bl	8000f9c <HAL_GetTick>
 8002556:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002558:	bf00      	nop
 800255a:	f7fe fd1f 	bl	8000f9c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	4293      	cmp	r3, r2
 8002564:	d0f9      	beq.n	800255a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_RCC_OscConfig+0x7ac>)
 8002568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_RCC_OscConfig+0x7b0>)
 800256c:	4013      	ands	r3, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002572:	00d2      	lsls	r2, r2, #3
 8002574:	4906      	ldr	r1, [pc, #24]	; (8002590 <HAL_RCC_OscConfig+0x7ac>)
 8002576:	4313      	orrs	r3, r2
 8002578:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_RCC_OscConfig+0x7ac>)
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	4a04      	ldr	r2, [pc, #16]	; (8002590 <HAL_RCC_OscConfig+0x7ac>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3730      	adds	r7, #48	; 0x30
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	58024400 	.word	0x58024400
 8002594:	ffff0007 	.word	0xffff0007

08002598 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e19c      	b.n	80028e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025ac:	4b8a      	ldr	r3, [pc, #552]	; (80027d8 <HAL_RCC_ClockConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d910      	bls.n	80025dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b87      	ldr	r3, [pc, #540]	; (80027d8 <HAL_RCC_ClockConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 020f 	bic.w	r2, r3, #15
 80025c2:	4985      	ldr	r1, [pc, #532]	; (80027d8 <HAL_RCC_ClockConfig+0x240>)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b83      	ldr	r3, [pc, #524]	; (80027d8 <HAL_RCC_ClockConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e184      	b.n	80028e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d010      	beq.n	800260a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	4b7b      	ldr	r3, [pc, #492]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d908      	bls.n	800260a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025f8:	4b78      	ldr	r3, [pc, #480]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	4975      	ldr	r1, [pc, #468]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 8002606:	4313      	orrs	r3, r2
 8002608:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d010      	beq.n	8002638 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	4b70      	ldr	r3, [pc, #448]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002622:	429a      	cmp	r2, r3
 8002624:	d908      	bls.n	8002638 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002626:	4b6d      	ldr	r3, [pc, #436]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	496a      	ldr	r1, [pc, #424]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 8002634:	4313      	orrs	r3, r2
 8002636:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	2b00      	cmp	r3, #0
 8002642:	d010      	beq.n	8002666 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699a      	ldr	r2, [r3, #24]
 8002648:	4b64      	ldr	r3, [pc, #400]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002650:	429a      	cmp	r2, r3
 8002652:	d908      	bls.n	8002666 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002654:	4b61      	ldr	r3, [pc, #388]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	495e      	ldr	r1, [pc, #376]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 8002662:	4313      	orrs	r3, r2
 8002664:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	d010      	beq.n	8002694 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69da      	ldr	r2, [r3, #28]
 8002676:	4b59      	ldr	r3, [pc, #356]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800267e:	429a      	cmp	r2, r3
 8002680:	d908      	bls.n	8002694 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002682:	4b56      	ldr	r3, [pc, #344]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	4953      	ldr	r1, [pc, #332]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 8002690:	4313      	orrs	r3, r2
 8002692:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d010      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	4b4d      	ldr	r3, [pc, #308]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 030f 	and.w	r3, r3, #15
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d908      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b0:	4b4a      	ldr	r3, [pc, #296]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f023 020f 	bic.w	r2, r3, #15
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4947      	ldr	r1, [pc, #284]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d055      	beq.n	800277a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80026ce:	4b43      	ldr	r3, [pc, #268]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	4940      	ldr	r1, [pc, #256]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026e8:	4b3c      	ldr	r3, [pc, #240]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d121      	bne.n	8002738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0f6      	b.n	80028e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d107      	bne.n	8002710 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002700:	4b36      	ldr	r3, [pc, #216]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d115      	bne.n	8002738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0ea      	b.n	80028e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d107      	bne.n	8002728 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002718:	4b30      	ldr	r3, [pc, #192]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0de      	b.n	80028e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002728:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0d6      	b.n	80028e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002738:	4b28      	ldr	r3, [pc, #160]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f023 0207 	bic.w	r2, r3, #7
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4925      	ldr	r1, [pc, #148]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 8002746:	4313      	orrs	r3, r2
 8002748:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800274a:	f7fe fc27 	bl	8000f9c <HAL_GetTick>
 800274e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002750:	e00a      	b.n	8002768 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002752:	f7fe fc23 	bl	8000f9c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0be      	b.n	80028e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002768:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	429a      	cmp	r2, r3
 8002778:	d1eb      	bne.n	8002752 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d010      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	4b14      	ldr	r3, [pc, #80]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	429a      	cmp	r2, r3
 8002794:	d208      	bcs.n	80027a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002796:	4b11      	ldr	r3, [pc, #68]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f023 020f 	bic.w	r2, r3, #15
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	490e      	ldr	r1, [pc, #56]	; (80027dc <HAL_RCC_ClockConfig+0x244>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_ClockConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d214      	bcs.n	80027e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_RCC_ClockConfig+0x240>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 020f 	bic.w	r2, r3, #15
 80027be:	4906      	ldr	r1, [pc, #24]	; (80027d8 <HAL_RCC_ClockConfig+0x240>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <HAL_RCC_ClockConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e086      	b.n	80028e6 <HAL_RCC_ClockConfig+0x34e>
 80027d8:	52002000 	.word	0x52002000
 80027dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d010      	beq.n	800280e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <HAL_RCC_ClockConfig+0x358>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d208      	bcs.n	800280e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027fc:	4b3c      	ldr	r3, [pc, #240]	; (80028f0 <HAL_RCC_ClockConfig+0x358>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	4939      	ldr	r1, [pc, #228]	; (80028f0 <HAL_RCC_ClockConfig+0x358>)
 800280a:	4313      	orrs	r3, r2
 800280c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d010      	beq.n	800283c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695a      	ldr	r2, [r3, #20]
 800281e:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <HAL_RCC_ClockConfig+0x358>)
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002826:	429a      	cmp	r2, r3
 8002828:	d208      	bcs.n	800283c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800282a:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <HAL_RCC_ClockConfig+0x358>)
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	492e      	ldr	r1, [pc, #184]	; (80028f0 <HAL_RCC_ClockConfig+0x358>)
 8002838:	4313      	orrs	r3, r2
 800283a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b00      	cmp	r3, #0
 8002846:	d010      	beq.n	800286a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699a      	ldr	r2, [r3, #24]
 800284c:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <HAL_RCC_ClockConfig+0x358>)
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002854:	429a      	cmp	r2, r3
 8002856:	d208      	bcs.n	800286a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002858:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <HAL_RCC_ClockConfig+0x358>)
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	4922      	ldr	r1, [pc, #136]	; (80028f0 <HAL_RCC_ClockConfig+0x358>)
 8002866:	4313      	orrs	r3, r2
 8002868:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b00      	cmp	r3, #0
 8002874:	d010      	beq.n	8002898 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69da      	ldr	r2, [r3, #28]
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <HAL_RCC_ClockConfig+0x358>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002882:	429a      	cmp	r2, r3
 8002884:	d208      	bcs.n	8002898 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002886:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <HAL_RCC_ClockConfig+0x358>)
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	4917      	ldr	r1, [pc, #92]	; (80028f0 <HAL_RCC_ClockConfig+0x358>)
 8002894:	4313      	orrs	r3, r2
 8002896:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002898:	f000 f834 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 800289c:	4602      	mov	r2, r0
 800289e:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <HAL_RCC_ClockConfig+0x358>)
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	4912      	ldr	r1, [pc, #72]	; (80028f4 <HAL_RCC_ClockConfig+0x35c>)
 80028aa:	5ccb      	ldrb	r3, [r1, r3]
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
 80028b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028b6:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <HAL_RCC_ClockConfig+0x358>)
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	4a0d      	ldr	r2, [pc, #52]	; (80028f4 <HAL_RCC_ClockConfig+0x35c>)
 80028c0:	5cd3      	ldrb	r3, [r2, r3]
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
 80028cc:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <HAL_RCC_ClockConfig+0x360>)
 80028ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028d0:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <HAL_RCC_ClockConfig+0x364>)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_RCC_ClockConfig+0x368>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fb14 	bl	8000f08 <HAL_InitTick>
 80028e0:	4603      	mov	r3, r0
 80028e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	58024400 	.word	0x58024400
 80028f4:	08005c58 	.word	0x08005c58
 80028f8:	24000004 	.word	0x24000004
 80028fc:	24000000 	.word	0x24000000
 8002900:	24000008 	.word	0x24000008

08002904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	; 0x24
 8002908:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800290a:	4bb3      	ldr	r3, [pc, #716]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002912:	2b18      	cmp	r3, #24
 8002914:	f200 8155 	bhi.w	8002bc2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002918:	a201      	add	r2, pc, #4	; (adr r2, 8002920 <HAL_RCC_GetSysClockFreq+0x1c>)
 800291a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291e:	bf00      	nop
 8002920:	08002985 	.word	0x08002985
 8002924:	08002bc3 	.word	0x08002bc3
 8002928:	08002bc3 	.word	0x08002bc3
 800292c:	08002bc3 	.word	0x08002bc3
 8002930:	08002bc3 	.word	0x08002bc3
 8002934:	08002bc3 	.word	0x08002bc3
 8002938:	08002bc3 	.word	0x08002bc3
 800293c:	08002bc3 	.word	0x08002bc3
 8002940:	080029ab 	.word	0x080029ab
 8002944:	08002bc3 	.word	0x08002bc3
 8002948:	08002bc3 	.word	0x08002bc3
 800294c:	08002bc3 	.word	0x08002bc3
 8002950:	08002bc3 	.word	0x08002bc3
 8002954:	08002bc3 	.word	0x08002bc3
 8002958:	08002bc3 	.word	0x08002bc3
 800295c:	08002bc3 	.word	0x08002bc3
 8002960:	080029b1 	.word	0x080029b1
 8002964:	08002bc3 	.word	0x08002bc3
 8002968:	08002bc3 	.word	0x08002bc3
 800296c:	08002bc3 	.word	0x08002bc3
 8002970:	08002bc3 	.word	0x08002bc3
 8002974:	08002bc3 	.word	0x08002bc3
 8002978:	08002bc3 	.word	0x08002bc3
 800297c:	08002bc3 	.word	0x08002bc3
 8002980:	080029b7 	.word	0x080029b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002984:	4b94      	ldr	r3, [pc, #592]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	d009      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002990:	4b91      	ldr	r3, [pc, #580]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	08db      	lsrs	r3, r3, #3
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	4a90      	ldr	r2, [pc, #576]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
 80029a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80029a2:	e111      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80029a4:	4b8d      	ldr	r3, [pc, #564]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029a6:	61bb      	str	r3, [r7, #24]
      break;
 80029a8:	e10e      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80029aa:	4b8d      	ldr	r3, [pc, #564]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029ac:	61bb      	str	r3, [r7, #24]
      break;
 80029ae:	e10b      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80029b0:	4b8c      	ldr	r3, [pc, #560]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80029b2:	61bb      	str	r3, [r7, #24]
      break;
 80029b4:	e108      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029b6:	4b88      	ldr	r3, [pc, #544]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80029c0:	4b85      	ldr	r3, [pc, #532]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029cc:	4b82      	ldr	r3, [pc, #520]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029d6:	4b80      	ldr	r3, [pc, #512]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	08db      	lsrs	r3, r3, #3
 80029dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80e1 	beq.w	8002bbc <HAL_RCC_GetSysClockFreq+0x2b8>
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	f000 8083 	beq.w	8002b08 <HAL_RCC_GetSysClockFreq+0x204>
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	f200 80a1 	bhi.w	8002b4c <HAL_RCC_GetSysClockFreq+0x248>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x114>
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d056      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002a16:	e099      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a18:	4b6f      	ldr	r3, [pc, #444]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d02d      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a24:	4b6c      	ldr	r3, [pc, #432]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	08db      	lsrs	r3, r3, #3
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	4a6b      	ldr	r2, [pc, #428]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
 8002a34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	ee07 3a90 	vmov	s15, r3
 8002a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a4e:	4b62      	ldr	r3, [pc, #392]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a56:	ee07 3a90 	vmov	s15, r3
 8002a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a62:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a7e:	e087      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002bec <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a92:	4b51      	ldr	r3, [pc, #324]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a9a:	ee07 3a90 	vmov	s15, r3
 8002a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aa6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002abe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ac2:	e065      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	ee07 3a90 	vmov	s15, r3
 8002aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ace:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002bf0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ad6:	4b40      	ldr	r3, [pc, #256]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ade:	ee07 3a90 	vmov	s15, r3
 8002ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b06:	e043      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b12:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002bf4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b1a:	4b2f      	ldr	r3, [pc, #188]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b22:	ee07 3a90 	vmov	s15, r3
 8002b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b2e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b4a:	e021      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b56:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002bf0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b66:	ee07 3a90 	vmov	s15, r3
 8002b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b72:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	0a5b      	lsrs	r3, r3, #9
 8002b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	ee07 3a90 	vmov	s15, r3
 8002ba4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ba8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bb4:	ee17 3a90 	vmov	r3, s15
 8002bb8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002bba:	e005      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
      break;
 8002bc0:	e002      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002bc4:	61bb      	str	r3, [r7, #24]
      break;
 8002bc6:	bf00      	nop
  }

  return sysclockfreq;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	; 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	58024400 	.word	0x58024400
 8002bdc:	03d09000 	.word	0x03d09000
 8002be0:	003d0900 	.word	0x003d0900
 8002be4:	007a1200 	.word	0x007a1200
 8002be8:	46000000 	.word	0x46000000
 8002bec:	4c742400 	.word	0x4c742400
 8002bf0:	4a742400 	.word	0x4a742400
 8002bf4:	4af42400 	.word	0x4af42400

08002bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002bfe:	f7ff fe81 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 8002c02:	4602      	mov	r2, r0
 8002c04:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	490f      	ldr	r1, [pc, #60]	; (8002c4c <HAL_RCC_GetHCLKFreq+0x54>)
 8002c10:	5ccb      	ldrb	r3, [r1, r3]
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <HAL_RCC_GetHCLKFreq+0x54>)
 8002c26:	5cd3      	ldrb	r3, [r2, r3]
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c32:	4a07      	ldr	r2, [pc, #28]	; (8002c50 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c36:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	08005c58 	.word	0x08005c58
 8002c50:	24000004 	.word	0x24000004
 8002c54:	24000000 	.word	0x24000000

08002c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002c5c:	f7ff ffcc 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	091b      	lsrs	r3, r3, #4
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	4904      	ldr	r1, [pc, #16]	; (8002c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c6e:	5ccb      	ldrb	r3, [r1, r3]
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	58024400 	.word	0x58024400
 8002c80:	08005c58 	.word	0x08005c58

08002c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002c88:	f7ff ffb6 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4904      	ldr	r1, [pc, #16]	; (8002cac <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	58024400 	.word	0x58024400
 8002cac:	08005c58 	.word	0x08005c58

08002cb0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb4:	b0c6      	sub	sp, #280	; 0x118
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002cd4:	2500      	movs	r5, #0
 8002cd6:	ea54 0305 	orrs.w	r3, r4, r5
 8002cda:	d049      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ce6:	d02f      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002ce8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002cec:	d828      	bhi.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002cee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cf2:	d01a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002cf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cf8:	d822      	bhi.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d02:	d007      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d04:	e01c      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d06:	4bab      	ldr	r3, [pc, #684]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	4aaa      	ldr	r2, [pc, #680]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d12:	e01a      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d18:	3308      	adds	r3, #8
 8002d1a:	2102      	movs	r1, #2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f001 fc25 	bl	800456c <RCCEx_PLL2_Config>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d28:	e00f      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d2e:	3328      	adds	r3, #40	; 0x28
 8002d30:	2102      	movs	r1, #2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f001 fccc 	bl	80046d0 <RCCEx_PLL3_Config>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d3e:	e004      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002d46:	e000      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10a      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d52:	4b98      	ldr	r3, [pc, #608]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d56:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d60:	4a94      	ldr	r2, [pc, #592]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d62:	430b      	orrs	r3, r1
 8002d64:	6513      	str	r3, [r2, #80]	; 0x50
 8002d66:	e003      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002d6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d78:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002d7c:	f04f 0900 	mov.w	r9, #0
 8002d80:	ea58 0309 	orrs.w	r3, r8, r9
 8002d84:	d047      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d82a      	bhi.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002d90:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d96:	bf00      	nop
 8002d98:	08002dad 	.word	0x08002dad
 8002d9c:	08002dbb 	.word	0x08002dbb
 8002da0:	08002dd1 	.word	0x08002dd1
 8002da4:	08002def 	.word	0x08002def
 8002da8:	08002def 	.word	0x08002def
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dac:	4b81      	ldr	r3, [pc, #516]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	4a80      	ldr	r2, [pc, #512]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002db8:	e01a      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f001 fbd2 	bl	800456c <RCCEx_PLL2_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dce:	e00f      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002dd4:	3328      	adds	r3, #40	; 0x28
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f001 fc79 	bl	80046d0 <RCCEx_PLL3_Config>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002de4:	e004      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002dec:	e000      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002df0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002df8:	4b6e      	ldr	r3, [pc, #440]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfc:	f023 0107 	bic.w	r1, r3, #7
 8002e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	4a6b      	ldr	r2, [pc, #428]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	6513      	str	r3, [r2, #80]	; 0x50
 8002e0c:	e003      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e12:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8002e22:	f04f 0b00 	mov.w	fp, #0
 8002e26:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e2a:	d05b      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e34:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002e38:	d03b      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002e3a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002e3e:	d834      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002e40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e44:	d037      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002e46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e4a:	d82e      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002e4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e50:	d033      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002e52:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e56:	d828      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5c:	d01a      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e62:	d822      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002e68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e6c:	d007      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002e6e:	e01c      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e70:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	4a4f      	ldr	r2, [pc, #316]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e7c:	e01e      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e82:	3308      	adds	r3, #8
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f001 fb70 	bl	800456c <RCCEx_PLL2_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e92:	e013      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e98:	3328      	adds	r3, #40	; 0x28
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 fc17 	bl	80046d0 <RCCEx_PLL3_Config>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ea8:	e008      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002eb0:	e004      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002eb2:	bf00      	nop
 8002eb4:	e002      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002eb6:	bf00      	nop
 8002eb8:	e000      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ebc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10b      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002ec4:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ed0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ed4:	4a37      	ldr	r2, [pc, #220]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eda:	e003      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002edc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ee0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eec:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002efa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002efe:	460b      	mov	r3, r1
 8002f00:	4313      	orrs	r3, r2
 8002f02:	d05d      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f0c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002f10:	d03b      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002f12:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002f16:	d834      	bhi.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f1c:	d037      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002f1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f22:	d82e      	bhi.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002f24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f28:	d033      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002f2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f2e:	d828      	bhi.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002f30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f34:	d01a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002f36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f3a:	d822      	bhi.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f44:	d007      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002f46:	e01c      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f48:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f54:	e01e      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f5a:	3308      	adds	r3, #8
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f001 fb04 	bl	800456c <RCCEx_PLL2_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f6a:	e013      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f70:	3328      	adds	r3, #40	; 0x28
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f001 fbab 	bl	80046d0 <RCCEx_PLL3_Config>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f80:	e008      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002f88:	e004      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002f8a:	bf00      	nop
 8002f8c:	e002      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002f8e:	bf00      	nop
 8002f90:	e000      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10d      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fa8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002fac:	4a01      	ldr	r2, [pc, #4]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8002fb2:	e005      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002fb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002fbc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002fcc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002fd6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	d03a      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe6:	2b30      	cmp	r3, #48	; 0x30
 8002fe8:	d01f      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002fea:	2b30      	cmp	r3, #48	; 0x30
 8002fec:	d819      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d00c      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d815      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d019      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d111      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ffe:	4baa      	ldr	r3, [pc, #680]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	4aa9      	ldr	r2, [pc, #676]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003008:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800300a:	e011      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800300c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003010:	3308      	adds	r3, #8
 8003012:	2102      	movs	r1, #2
 8003014:	4618      	mov	r0, r3
 8003016:	f001 faa9 	bl	800456c <RCCEx_PLL2_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003020:	e006      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003028:	e002      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800302a:	bf00      	nop
 800302c:	e000      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800302e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003030:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10a      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003038:	4b9b      	ldr	r3, [pc, #620]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800303a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003046:	4a98      	ldr	r2, [pc, #608]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003048:	430b      	orrs	r3, r1
 800304a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800304c:	e003      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003052:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003062:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003066:	2300      	movs	r3, #0
 8003068:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800306c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003070:	460b      	mov	r3, r1
 8003072:	4313      	orrs	r3, r2
 8003074:	d051      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003080:	d035      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003082:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003086:	d82e      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003088:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800308c:	d031      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800308e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003092:	d828      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003098:	d01a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800309a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800309e:	d822      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80030a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a8:	d007      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80030aa:	e01c      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ac:	4b7e      	ldr	r3, [pc, #504]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	4a7d      	ldr	r2, [pc, #500]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030b8:	e01c      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030be:	3308      	adds	r3, #8
 80030c0:	2100      	movs	r1, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f001 fa52 	bl	800456c <RCCEx_PLL2_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030ce:	e011      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030d4:	3328      	adds	r3, #40	; 0x28
 80030d6:	2100      	movs	r1, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	f001 faf9 	bl	80046d0 <RCCEx_PLL3_Config>
 80030de:	4603      	mov	r3, r0
 80030e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030e4:	e006      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80030ec:	e002      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80030ee:	bf00      	nop
 80030f0:	e000      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80030f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80030fc:	4b6a      	ldr	r3, [pc, #424]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003100:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310a:	4a67      	ldr	r2, [pc, #412]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800310c:	430b      	orrs	r3, r1
 800310e:	6513      	str	r3, [r2, #80]	; 0x50
 8003110:	e003      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003112:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003116:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800311a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800311e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003122:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003126:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800312a:	2300      	movs	r3, #0
 800312c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003130:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003134:	460b      	mov	r3, r1
 8003136:	4313      	orrs	r3, r2
 8003138:	d053      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800313a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800313e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003144:	d033      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003146:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800314a:	d82c      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800314c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003150:	d02f      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003152:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003156:	d826      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003158:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800315c:	d02b      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800315e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003162:	d820      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003164:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003168:	d012      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800316a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800316e:	d81a      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d022      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003178:	d115      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800317a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800317e:	3308      	adds	r3, #8
 8003180:	2101      	movs	r1, #1
 8003182:	4618      	mov	r0, r3
 8003184:	f001 f9f2 	bl	800456c <RCCEx_PLL2_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800318e:	e015      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003194:	3328      	adds	r3, #40	; 0x28
 8003196:	2101      	movs	r1, #1
 8003198:	4618      	mov	r0, r3
 800319a:	f001 fa99 	bl	80046d0 <RCCEx_PLL3_Config>
 800319e:	4603      	mov	r3, r0
 80031a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80031a4:	e00a      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80031ac:	e006      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80031ae:	bf00      	nop
 80031b0:	e004      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80031b2:	bf00      	nop
 80031b4:	e002      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80031b6:	bf00      	nop
 80031b8:	e000      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80031ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10a      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80031c4:	4b38      	ldr	r3, [pc, #224]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80031cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d2:	4a35      	ldr	r2, [pc, #212]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6513      	str	r3, [r2, #80]	; 0x50
 80031d8:	e003      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80031e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80031ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031f2:	2300      	movs	r3, #0
 80031f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80031f8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031fc:	460b      	mov	r3, r1
 80031fe:	4313      	orrs	r3, r2
 8003200:	d058      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003206:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800320a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800320e:	d033      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003210:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003214:	d82c      	bhi.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321a:	d02f      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800321c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003220:	d826      	bhi.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003222:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003226:	d02b      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003228:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800322c:	d820      	bhi.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800322e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003232:	d012      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003238:	d81a      	bhi.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d022      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800323e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003242:	d115      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003248:	3308      	adds	r3, #8
 800324a:	2101      	movs	r1, #1
 800324c:	4618      	mov	r0, r3
 800324e:	f001 f98d 	bl	800456c <RCCEx_PLL2_Config>
 8003252:	4603      	mov	r3, r0
 8003254:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003258:	e015      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800325a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800325e:	3328      	adds	r3, #40	; 0x28
 8003260:	2101      	movs	r1, #1
 8003262:	4618      	mov	r0, r3
 8003264:	f001 fa34 	bl	80046d0 <RCCEx_PLL3_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800326e:	e00a      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003276:	e006      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003278:	bf00      	nop
 800327a:	e004      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800327c:	bf00      	nop
 800327e:	e002      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003280:	bf00      	nop
 8003282:	e000      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003286:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10e      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003292:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800329a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800329e:	4a02      	ldr	r2, [pc, #8]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6593      	str	r3, [r2, #88]	; 0x58
 80032a4:	e006      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80032a6:	bf00      	nop
 80032a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80032b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80032c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032c4:	2300      	movs	r3, #0
 80032c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80032ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4313      	orrs	r3, r2
 80032d2:	d037      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80032d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032de:	d00e      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80032e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032e4:	d816      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d018      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80032ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ee:	d111      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f0:	4bc4      	ldr	r3, [pc, #784]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	4ac3      	ldr	r2, [pc, #780]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032fc:	e00f      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003302:	3308      	adds	r3, #8
 8003304:	2101      	movs	r1, #1
 8003306:	4618      	mov	r0, r3
 8003308:	f001 f930 	bl	800456c <RCCEx_PLL2_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003312:	e004      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800331a:	e000      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800331c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800331e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10a      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003326:	4bb7      	ldr	r3, [pc, #732]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800332e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003334:	4ab3      	ldr	r2, [pc, #716]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003336:	430b      	orrs	r3, r1
 8003338:	6513      	str	r3, [r2, #80]	; 0x50
 800333a:	e003      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003340:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003350:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800335a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800335e:	460b      	mov	r3, r1
 8003360:	4313      	orrs	r3, r2
 8003362:	d039      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336a:	2b03      	cmp	r3, #3
 800336c:	d81c      	bhi.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800336e:	a201      	add	r2, pc, #4	; (adr r2, 8003374 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003374:	080033b1 	.word	0x080033b1
 8003378:	08003385 	.word	0x08003385
 800337c:	08003393 	.word	0x08003393
 8003380:	080033b1 	.word	0x080033b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003384:	4b9f      	ldr	r3, [pc, #636]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	4a9e      	ldr	r2, [pc, #632]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800338a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003390:	e00f      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003396:	3308      	adds	r3, #8
 8003398:	2102      	movs	r1, #2
 800339a:	4618      	mov	r0, r3
 800339c:	f001 f8e6 	bl	800456c <RCCEx_PLL2_Config>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80033a6:	e004      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80033ae:	e000      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80033b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10a      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80033ba:	4b92      	ldr	r3, [pc, #584]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033be:	f023 0103 	bic.w	r1, r3, #3
 80033c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c8:	4a8e      	ldr	r2, [pc, #568]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033ca:	430b      	orrs	r3, r1
 80033cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033ce:	e003      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80033e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033e8:	2300      	movs	r3, #0
 80033ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f000 8099 	beq.w	800352c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033fa:	4b83      	ldr	r3, [pc, #524]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a82      	ldr	r2, [pc, #520]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003404:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003406:	f7fd fdc9 	bl	8000f9c <HAL_GetTick>
 800340a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800340e:	e00b      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003410:	f7fd fdc4 	bl	8000f9c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b64      	cmp	r3, #100	; 0x64
 800341e:	d903      	bls.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003426:	e005      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003428:	4b77      	ldr	r3, [pc, #476]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ed      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003434:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003438:	2b00      	cmp	r3, #0
 800343a:	d173      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800343c:	4b71      	ldr	r3, [pc, #452]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800343e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003444:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003448:	4053      	eors	r3, r2
 800344a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344e:	2b00      	cmp	r3, #0
 8003450:	d015      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003452:	4b6c      	ldr	r3, [pc, #432]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800345e:	4b69      	ldr	r3, [pc, #420]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	4a68      	ldr	r2, [pc, #416]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003468:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800346a:	4b66      	ldr	r3, [pc, #408]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	4a65      	ldr	r2, [pc, #404]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003474:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003476:	4a63      	ldr	r2, [pc, #396]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800347c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800347e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003482:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348a:	d118      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fd fd86 	bl	8000f9c <HAL_GetTick>
 8003490:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003494:	e00d      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003496:	f7fd fd81 	bl	8000f9c <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80034a0:	1ad2      	subs	r2, r2, r3
 80034a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d903      	bls.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80034b0:	e005      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034b2:	4b54      	ldr	r3, [pc, #336]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0eb      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80034be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d129      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034d6:	d10e      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80034d8:	4b4a      	ldr	r3, [pc, #296]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80034e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034e8:	091a      	lsrs	r2, r3, #4
 80034ea:	4b48      	ldr	r3, [pc, #288]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	4a45      	ldr	r2, [pc, #276]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034f0:	430b      	orrs	r3, r1
 80034f2:	6113      	str	r3, [r2, #16]
 80034f4:	e005      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80034f6:	4b43      	ldr	r3, [pc, #268]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	4a42      	ldr	r2, [pc, #264]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003500:	6113      	str	r3, [r2, #16]
 8003502:	4b40      	ldr	r3, [pc, #256]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003504:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800350a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800350e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003512:	4a3c      	ldr	r2, [pc, #240]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003514:	430b      	orrs	r3, r1
 8003516:	6713      	str	r3, [r2, #112]	; 0x70
 8003518:	e008      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800351a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800351e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003522:	e003      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003524:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003528:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800352c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f002 0301 	and.w	r3, r2, #1
 8003538:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800353c:	2300      	movs	r3, #0
 800353e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003542:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003546:	460b      	mov	r3, r1
 8003548:	4313      	orrs	r3, r2
 800354a:	f000 808f 	beq.w	800366c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800354e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003554:	2b28      	cmp	r3, #40	; 0x28
 8003556:	d871      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003558:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003645 	.word	0x08003645
 8003564:	0800363d 	.word	0x0800363d
 8003568:	0800363d 	.word	0x0800363d
 800356c:	0800363d 	.word	0x0800363d
 8003570:	0800363d 	.word	0x0800363d
 8003574:	0800363d 	.word	0x0800363d
 8003578:	0800363d 	.word	0x0800363d
 800357c:	0800363d 	.word	0x0800363d
 8003580:	08003611 	.word	0x08003611
 8003584:	0800363d 	.word	0x0800363d
 8003588:	0800363d 	.word	0x0800363d
 800358c:	0800363d 	.word	0x0800363d
 8003590:	0800363d 	.word	0x0800363d
 8003594:	0800363d 	.word	0x0800363d
 8003598:	0800363d 	.word	0x0800363d
 800359c:	0800363d 	.word	0x0800363d
 80035a0:	08003627 	.word	0x08003627
 80035a4:	0800363d 	.word	0x0800363d
 80035a8:	0800363d 	.word	0x0800363d
 80035ac:	0800363d 	.word	0x0800363d
 80035b0:	0800363d 	.word	0x0800363d
 80035b4:	0800363d 	.word	0x0800363d
 80035b8:	0800363d 	.word	0x0800363d
 80035bc:	0800363d 	.word	0x0800363d
 80035c0:	08003645 	.word	0x08003645
 80035c4:	0800363d 	.word	0x0800363d
 80035c8:	0800363d 	.word	0x0800363d
 80035cc:	0800363d 	.word	0x0800363d
 80035d0:	0800363d 	.word	0x0800363d
 80035d4:	0800363d 	.word	0x0800363d
 80035d8:	0800363d 	.word	0x0800363d
 80035dc:	0800363d 	.word	0x0800363d
 80035e0:	08003645 	.word	0x08003645
 80035e4:	0800363d 	.word	0x0800363d
 80035e8:	0800363d 	.word	0x0800363d
 80035ec:	0800363d 	.word	0x0800363d
 80035f0:	0800363d 	.word	0x0800363d
 80035f4:	0800363d 	.word	0x0800363d
 80035f8:	0800363d 	.word	0x0800363d
 80035fc:	0800363d 	.word	0x0800363d
 8003600:	08003645 	.word	0x08003645
 8003604:	58024400 	.word	0x58024400
 8003608:	58024800 	.word	0x58024800
 800360c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003614:	3308      	adds	r3, #8
 8003616:	2101      	movs	r1, #1
 8003618:	4618      	mov	r0, r3
 800361a:	f000 ffa7 	bl	800456c <RCCEx_PLL2_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003624:	e00f      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800362a:	3328      	adds	r3, #40	; 0x28
 800362c:	2101      	movs	r1, #1
 800362e:	4618      	mov	r0, r3
 8003630:	f001 f84e 	bl	80046d0 <RCCEx_PLL3_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800363a:	e004      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003642:	e000      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003646:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10a      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800364e:	4bbf      	ldr	r3, [pc, #764]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800365a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800365c:	4abb      	ldr	r2, [pc, #748]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800365e:	430b      	orrs	r3, r1
 8003660:	6553      	str	r3, [r2, #84]	; 0x54
 8003662:	e003      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003668:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800366c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	f002 0302 	and.w	r3, r2, #2
 8003678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800367c:	2300      	movs	r3, #0
 800367e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003682:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003686:	460b      	mov	r3, r1
 8003688:	4313      	orrs	r3, r2
 800368a:	d041      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800368c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003692:	2b05      	cmp	r3, #5
 8003694:	d824      	bhi.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003696:	a201      	add	r2, pc, #4	; (adr r2, 800369c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369c:	080036e9 	.word	0x080036e9
 80036a0:	080036b5 	.word	0x080036b5
 80036a4:	080036cb 	.word	0x080036cb
 80036a8:	080036e9 	.word	0x080036e9
 80036ac:	080036e9 	.word	0x080036e9
 80036b0:	080036e9 	.word	0x080036e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036b8:	3308      	adds	r3, #8
 80036ba:	2101      	movs	r1, #1
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 ff55 	bl	800456c <RCCEx_PLL2_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036c8:	e00f      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036ce:	3328      	adds	r3, #40	; 0x28
 80036d0:	2101      	movs	r1, #1
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fffc 	bl	80046d0 <RCCEx_PLL3_Config>
 80036d8:	4603      	mov	r3, r0
 80036da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036de:	e004      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80036e6:	e000      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80036e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80036f2:	4b96      	ldr	r3, [pc, #600]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	f023 0107 	bic.w	r1, r3, #7
 80036fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003700:	4a92      	ldr	r2, [pc, #584]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003702:	430b      	orrs	r3, r1
 8003704:	6553      	str	r3, [r2, #84]	; 0x54
 8003706:	e003      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003708:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800370c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	f002 0304 	and.w	r3, r2, #4
 800371c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003720:	2300      	movs	r3, #0
 8003722:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003726:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800372a:	460b      	mov	r3, r1
 800372c:	4313      	orrs	r3, r2
 800372e:	d044      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	2b05      	cmp	r3, #5
 800373a:	d825      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800373c:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003791 	.word	0x08003791
 8003748:	0800375d 	.word	0x0800375d
 800374c:	08003773 	.word	0x08003773
 8003750:	08003791 	.word	0x08003791
 8003754:	08003791 	.word	0x08003791
 8003758:	08003791 	.word	0x08003791
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800375c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003760:	3308      	adds	r3, #8
 8003762:	2101      	movs	r1, #1
 8003764:	4618      	mov	r0, r3
 8003766:	f000 ff01 	bl	800456c <RCCEx_PLL2_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003770:	e00f      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003776:	3328      	adds	r3, #40	; 0x28
 8003778:	2101      	movs	r1, #1
 800377a:	4618      	mov	r0, r3
 800377c:	f000 ffa8 	bl	80046d0 <RCCEx_PLL3_Config>
 8003780:	4603      	mov	r3, r0
 8003782:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003786:	e004      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800378e:	e000      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003792:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10b      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800379a:	4b6c      	ldr	r3, [pc, #432]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	f023 0107 	bic.w	r1, r3, #7
 80037a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	4a68      	ldr	r2, [pc, #416]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6593      	str	r3, [r2, #88]	; 0x58
 80037b0:	e003      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	f002 0320 	and.w	r3, r2, #32
 80037c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037ca:	2300      	movs	r3, #0
 80037cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80037d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4313      	orrs	r3, r2
 80037d8:	d055      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80037da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037e6:	d033      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80037e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037ec:	d82c      	bhi.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80037ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f2:	d02f      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80037f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f8:	d826      	bhi.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80037fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037fe:	d02b      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003800:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003804:	d820      	bhi.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800380a:	d012      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800380c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003810:	d81a      	bhi.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003812:	2b00      	cmp	r3, #0
 8003814:	d022      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003816:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800381a:	d115      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800381c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003820:	3308      	adds	r3, #8
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fea1 	bl	800456c <RCCEx_PLL2_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003830:	e015      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003836:	3328      	adds	r3, #40	; 0x28
 8003838:	2102      	movs	r1, #2
 800383a:	4618      	mov	r0, r3
 800383c:	f000 ff48 	bl	80046d0 <RCCEx_PLL3_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003846:	e00a      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800384e:	e006      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003850:	bf00      	nop
 8003852:	e004      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003854:	bf00      	nop
 8003856:	e002      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003858:	bf00      	nop
 800385a:	e000      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800385c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10b      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003866:	4b39      	ldr	r3, [pc, #228]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800386e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003876:	4a35      	ldr	r2, [pc, #212]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003878:	430b      	orrs	r3, r1
 800387a:	6553      	str	r3, [r2, #84]	; 0x54
 800387c:	e003      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003882:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003892:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003896:	2300      	movs	r3, #0
 8003898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800389c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80038a0:	460b      	mov	r3, r1
 80038a2:	4313      	orrs	r3, r2
 80038a4:	d058      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80038a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038b2:	d033      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80038b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038b8:	d82c      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80038ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038be:	d02f      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80038c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c4:	d826      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80038c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038ca:	d02b      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80038cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038d0:	d820      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80038d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d6:	d012      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80038d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038dc:	d81a      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d022      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80038e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e6:	d115      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ec:	3308      	adds	r3, #8
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fe3b 	bl	800456c <RCCEx_PLL2_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80038fc:	e015      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003902:	3328      	adds	r3, #40	; 0x28
 8003904:	2102      	movs	r1, #2
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fee2 	bl	80046d0 <RCCEx_PLL3_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003912:	e00a      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800391a:	e006      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800391c:	bf00      	nop
 800391e:	e004      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003920:	bf00      	nop
 8003922:	e002      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003924:	bf00      	nop
 8003926:	e000      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800392a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10e      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003936:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800393a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800393e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003942:	4a02      	ldr	r2, [pc, #8]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003944:	430b      	orrs	r3, r1
 8003946:	6593      	str	r3, [r2, #88]	; 0x58
 8003948:	e006      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800394a:	bf00      	nop
 800394c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003950:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003954:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003960:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003964:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003968:	2300      	movs	r3, #0
 800396a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800396e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003972:	460b      	mov	r3, r1
 8003974:	4313      	orrs	r3, r2
 8003976:	d055      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800397c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003980:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003984:	d033      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003986:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800398a:	d82c      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800398c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003990:	d02f      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003996:	d826      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003998:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800399c:	d02b      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800399e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80039a2:	d820      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80039a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039a8:	d012      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80039aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ae:	d81a      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d022      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80039b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b8:	d115      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039be:	3308      	adds	r3, #8
 80039c0:	2100      	movs	r1, #0
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fdd2 	bl	800456c <RCCEx_PLL2_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80039ce:	e015      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039d4:	3328      	adds	r3, #40	; 0x28
 80039d6:	2102      	movs	r1, #2
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fe79 	bl	80046d0 <RCCEx_PLL3_Config>
 80039de:	4603      	mov	r3, r0
 80039e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80039e4:	e00a      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80039ec:	e006      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80039ee:	bf00      	nop
 80039f0:	e004      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80039f2:	bf00      	nop
 80039f4:	e002      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80039f6:	bf00      	nop
 80039f8:	e000      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80039fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10b      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003a04:	4ba0      	ldr	r3, [pc, #640]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a08:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a14:	4a9c      	ldr	r2, [pc, #624]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a16:	430b      	orrs	r3, r1
 8003a18:	6593      	str	r3, [r2, #88]	; 0x58
 8003a1a:	e003      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	f002 0308 	and.w	r3, r2, #8
 8003a30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a34:	2300      	movs	r3, #0
 8003a36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003a3a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4313      	orrs	r3, r2
 8003a42:	d01e      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a56:	3328      	adds	r3, #40	; 0x28
 8003a58:	2102      	movs	r1, #2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fe38 	bl	80046d0 <RCCEx_PLL3_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003a6c:	4b86      	ldr	r3, [pc, #536]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a7c:	4a82      	ldr	r2, [pc, #520]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8a:	f002 0310 	and.w	r3, r2, #16
 8003a8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a92:	2300      	movs	r3, #0
 8003a94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a98:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	d01e      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aae:	d10c      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab4:	3328      	adds	r3, #40	; 0x28
 8003ab6:	2102      	movs	r1, #2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fe09 	bl	80046d0 <RCCEx_PLL3_Config>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003aca:	4b6f      	ldr	r3, [pc, #444]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ace:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ada:	4a6b      	ldr	r2, [pc, #428]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8003aee:	2300      	movs	r3, #0
 8003af0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003af2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003af6:	460b      	mov	r3, r1
 8003af8:	4313      	orrs	r3, r2
 8003afa:	d03e      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b08:	d022      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003b0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b0e:	d81b      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b18:	d00b      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003b1a:	e015      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b20:	3308      	adds	r3, #8
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fd21 	bl	800456c <RCCEx_PLL2_Config>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b30:	e00f      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b36:	3328      	adds	r3, #40	; 0x28
 8003b38:	2102      	movs	r1, #2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fdc8 	bl	80046d0 <RCCEx_PLL3_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b46:	e004      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003b4e:	e000      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10b      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b5a:	4b4b      	ldr	r3, [pc, #300]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b6a:	4a47      	ldr	r2, [pc, #284]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b70:	e003      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b76:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003b86:	673b      	str	r3, [r7, #112]	; 0x70
 8003b88:	2300      	movs	r3, #0
 8003b8a:	677b      	str	r3, [r7, #116]	; 0x74
 8003b8c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003b90:	460b      	mov	r3, r1
 8003b92:	4313      	orrs	r3, r2
 8003b94:	d03b      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ba2:	d01f      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003ba4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ba8:	d818      	bhi.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bae:	d003      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003bb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bb4:	d007      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003bb6:	e011      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb8:	4b33      	ldr	r3, [pc, #204]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	4a32      	ldr	r2, [pc, #200]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003bc4:	e00f      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bca:	3328      	adds	r3, #40	; 0x28
 8003bcc:	2101      	movs	r1, #1
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fd7e 	bl	80046d0 <RCCEx_PLL3_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003bda:	e004      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003be2:	e000      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10b      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bee:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bfe:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c00:	430b      	orrs	r3, r1
 8003c02:	6553      	str	r3, [r2, #84]	; 0x54
 8003c04:	e003      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c0a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003c1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c20:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003c24:	460b      	mov	r3, r1
 8003c26:	4313      	orrs	r3, r2
 8003c28:	d034      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c38:	d007      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003c3a:	e011      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c3c:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	4a11      	ldr	r2, [pc, #68]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c48:	e00e      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c4e:	3308      	adds	r3, #8
 8003c50:	2102      	movs	r1, #2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fc8a 	bl	800456c <RCCEx_PLL2_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c5e:	e003      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10d      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003c70:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7e:	4a02      	ldr	r2, [pc, #8]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c80:	430b      	orrs	r3, r1
 8003c82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c84:	e006      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003c86:	bf00      	nop
 8003c88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003ca0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ca6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003caa:	460b      	mov	r3, r1
 8003cac:	4313      	orrs	r3, r2
 8003cae:	d00c      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cb4:	3328      	adds	r3, #40	; 0x28
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fd09 	bl	80046d0 <RCCEx_PLL3_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003cd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cd8:	2300      	movs	r3, #0
 8003cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cdc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	d036      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cf0:	d018      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003cf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cf6:	d811      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cfc:	d014      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d02:	d80b      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d011      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0c:	d106      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d0e:	4bb7      	ldr	r3, [pc, #732]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	4ab6      	ldr	r2, [pc, #728]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003d1a:	e008      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003d22:	e004      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003d24:	bf00      	nop
 8003d26:	e002      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003d28:	bf00      	nop
 8003d2a:	e000      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d36:	4bad      	ldr	r3, [pc, #692]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d44:	4aa9      	ldr	r2, [pc, #676]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d46:	430b      	orrs	r3, r1
 8003d48:	6553      	str	r3, [r2, #84]	; 0x54
 8003d4a:	e003      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003d60:	653b      	str	r3, [r7, #80]	; 0x50
 8003d62:	2300      	movs	r3, #0
 8003d64:	657b      	str	r3, [r7, #84]	; 0x54
 8003d66:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	d009      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d70:	4b9e      	ldr	r3, [pc, #632]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	4a9b      	ldr	r2, [pc, #620]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d92:	2300      	movs	r3, #0
 8003d94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d96:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	d009      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003da0:	4b92      	ldr	r3, [pc, #584]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dae:	4a8f      	ldr	r2, [pc, #572]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8003dc6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	d00e      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dd0:	4b86      	ldr	r3, [pc, #536]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	4a85      	ldr	r2, [pc, #532]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003dd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dda:	6113      	str	r3, [r2, #16]
 8003ddc:	4b83      	ldr	r3, [pc, #524]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003dde:	6919      	ldr	r1, [r3, #16]
 8003de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003de4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003de8:	4a80      	ldr	r2, [pc, #512]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003dea:	430b      	orrs	r3, r1
 8003dec:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003dfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e00:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003e04:	460b      	mov	r3, r1
 8003e06:	4313      	orrs	r3, r2
 8003e08:	d009      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e0a:	4b78      	ldr	r3, [pc, #480]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e18:	4a74      	ldr	r2, [pc, #464]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003e2a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e30:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003e34:	460b      	mov	r3, r1
 8003e36:	4313      	orrs	r3, r2
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e3a:	4b6c      	ldr	r3, [pc, #432]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4a:	4a68      	ldr	r2, [pc, #416]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e58:	2100      	movs	r1, #0
 8003e5a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e62:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003e66:	460b      	mov	r3, r1
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	d011      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e70:	3308      	adds	r3, #8
 8003e72:	2100      	movs	r1, #0
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fb79 	bl	800456c <RCCEx_PLL2_Config>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003e80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	2100      	movs	r1, #0
 8003e9a:	6239      	str	r1, [r7, #32]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	d011      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fb59 	bl	800456c <RCCEx_PLL2_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003ec0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ecc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	2100      	movs	r1, #0
 8003eda:	61b9      	str	r1, [r7, #24]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	d011      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fb39 	bl	800456c <RCCEx_PLL2_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003f00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	2100      	movs	r1, #0
 8003f1a:	6139      	str	r1, [r7, #16]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003f26:	460b      	mov	r3, r1
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	d011      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f30:	3328      	adds	r3, #40	; 0x28
 8003f32:	2100      	movs	r1, #0
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fbcb 	bl	80046d0 <RCCEx_PLL3_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8003f40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	2100      	movs	r1, #0
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f66:	460b      	mov	r3, r1
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	d011      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f70:	3328      	adds	r3, #40	; 0x28
 8003f72:	2101      	movs	r1, #1
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fbab 	bl	80046d0 <RCCEx_PLL3_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003f80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	2100      	movs	r1, #0
 8003f9a:	6039      	str	r1, [r7, #0]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	607b      	str	r3, [r7, #4]
 8003fa2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	d011      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fb0:	3328      	adds	r3, #40	; 0x28
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fb8b 	bl	80046d0 <RCCEx_PLL3_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003fc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fcc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8003fd0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e000      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fea:	bf00      	nop
 8003fec:	58024400 	.word	0x58024400

08003ff0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003ff4:	f7fe fe00 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4904      	ldr	r1, [pc, #16]	; (8004018 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd80      	pop	{r7, pc}
 8004014:	58024400 	.word	0x58024400
 8004018:	08005c58 	.word	0x08005c58

0800401c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800401c:	b480      	push	{r7}
 800401e:	b089      	sub	sp, #36	; 0x24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004024:	4ba1      	ldr	r3, [pc, #644]	; (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800402e:	4b9f      	ldr	r3, [pc, #636]	; (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	0b1b      	lsrs	r3, r3, #12
 8004034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004038:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800403a:	4b9c      	ldr	r3, [pc, #624]	; (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	091b      	lsrs	r3, r3, #4
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004046:	4b99      	ldr	r3, [pc, #612]	; (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404a:	08db      	lsrs	r3, r3, #3
 800404c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8111 	beq.w	800428c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2b02      	cmp	r3, #2
 800406e:	f000 8083 	beq.w	8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b02      	cmp	r3, #2
 8004076:	f200 80a1 	bhi.w	80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d056      	beq.n	8004134 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004086:	e099      	b.n	80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004088:	4b88      	ldr	r3, [pc, #544]	; (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d02d      	beq.n	80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004094:	4b85      	ldr	r3, [pc, #532]	; (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	08db      	lsrs	r3, r3, #3
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	4a84      	ldr	r2, [pc, #528]	; (80042b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80040a0:	fa22 f303 	lsr.w	r3, r2, r3
 80040a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	ee07 3a90 	vmov	s15, r3
 80040ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	ee07 3a90 	vmov	s15, r3
 80040b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040be:	4b7b      	ldr	r3, [pc, #492]	; (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80040d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80042b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80040ee:	e087      	b.n	8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80042b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80040fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004102:	4b6a      	ldr	r3, [pc, #424]	; (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004112:	ed97 6a03 	vldr	s12, [r7, #12]
 8004116:	eddf 5a67 	vldr	s11, [pc, #412]	; 80042b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800411a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800411e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800412a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004132:	e065      	b.n	8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	ee07 3a90 	vmov	s15, r3
 800413a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800413e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80042bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004146:	4b59      	ldr	r3, [pc, #356]	; (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004156:	ed97 6a03 	vldr	s12, [r7, #12]
 800415a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80042b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800415e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800416a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800416e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004176:	e043      	b.n	8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004182:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80042c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800418a:	4b48      	ldr	r3, [pc, #288]	; (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800419a:	ed97 6a03 	vldr	s12, [r7, #12]
 800419e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80042b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ba:	e021      	b.n	8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80042bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ce:	4b37      	ldr	r3, [pc, #220]	; (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041de:	ed97 6a03 	vldr	s12, [r7, #12]
 80041e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80042b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004200:	4b2a      	ldr	r3, [pc, #168]	; (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004204:	0a5b      	lsrs	r3, r3, #9
 8004206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800421a:	edd7 6a07 	vldr	s13, [r7, #28]
 800421e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004226:	ee17 2a90 	vmov	r2, s15
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800422e:	4b1f      	ldr	r3, [pc, #124]	; (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	0c1b      	lsrs	r3, r3, #16
 8004234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004238:	ee07 3a90 	vmov	s15, r3
 800423c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004240:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004244:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004248:	edd7 6a07 	vldr	s13, [r7, #28]
 800424c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004254:	ee17 2a90 	vmov	r2, s15
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800425c:	4b13      	ldr	r3, [pc, #76]	; (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	0e1b      	lsrs	r3, r3, #24
 8004262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004272:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004276:	edd7 6a07 	vldr	s13, [r7, #28]
 800427a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800427e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004282:	ee17 2a90 	vmov	r2, s15
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800428a:	e008      	b.n	800429e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	609a      	str	r2, [r3, #8]
}
 800429e:	bf00      	nop
 80042a0:	3724      	adds	r7, #36	; 0x24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	58024400 	.word	0x58024400
 80042b0:	03d09000 	.word	0x03d09000
 80042b4:	46000000 	.word	0x46000000
 80042b8:	4c742400 	.word	0x4c742400
 80042bc:	4a742400 	.word	0x4a742400
 80042c0:	4af42400 	.word	0x4af42400

080042c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b089      	sub	sp, #36	; 0x24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042cc:	4ba1      	ldr	r3, [pc, #644]	; (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80042d6:	4b9f      	ldr	r3, [pc, #636]	; (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	0d1b      	lsrs	r3, r3, #20
 80042dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80042e2:	4b9c      	ldr	r3, [pc, #624]	; (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	0a1b      	lsrs	r3, r3, #8
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80042ee:	4b99      	ldr	r3, [pc, #612]	; (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	08db      	lsrs	r3, r3, #3
 80042f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004306:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8111 	beq.w	8004534 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b02      	cmp	r3, #2
 8004316:	f000 8083 	beq.w	8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	2b02      	cmp	r3, #2
 800431e:	f200 80a1 	bhi.w	8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d056      	beq.n	80043dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800432e:	e099      	b.n	8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004330:	4b88      	ldr	r3, [pc, #544]	; (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d02d      	beq.n	8004398 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800433c:	4b85      	ldr	r3, [pc, #532]	; (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	08db      	lsrs	r3, r3, #3
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	4a84      	ldr	r2, [pc, #528]	; (8004558 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
 800434c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	ee07 3a90 	vmov	s15, r3
 8004354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004366:	4b7b      	ldr	r3, [pc, #492]	; (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004376:	ed97 6a03 	vldr	s12, [r7, #12]
 800437a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800455c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800437e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800438a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800438e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004392:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004396:	e087      	b.n	80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004560 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80043a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043aa:	4b6a      	ldr	r3, [pc, #424]	; (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b2:	ee07 3a90 	vmov	s15, r3
 80043b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80043be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800455c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043da:	e065      	b.n	80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ee:	4b59      	ldr	r3, [pc, #356]	; (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004402:	eddf 5a56 	vldr	s11, [pc, #344]	; 800455c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800440a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800441e:	e043      	b.n	80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004568 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800442e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004432:	4b48      	ldr	r3, [pc, #288]	; (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004442:	ed97 6a03 	vldr	s12, [r7, #12]
 8004446:	eddf 5a45 	vldr	s11, [pc, #276]	; 800455c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800444a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800445a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004462:	e021      	b.n	80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004476:	4b37      	ldr	r3, [pc, #220]	; (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004486:	ed97 6a03 	vldr	s12, [r7, #12]
 800448a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800455c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800448e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800449a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80044a8:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	0a5b      	lsrs	r3, r3, #9
 80044ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80044c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ce:	ee17 2a90 	vmov	r2, s15
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80044d6:	4b1f      	ldr	r3, [pc, #124]	; (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	0c1b      	lsrs	r3, r3, #16
 80044dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044e0:	ee07 3a90 	vmov	s15, r3
 80044e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80044f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044fc:	ee17 2a90 	vmov	r2, s15
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004504:	4b13      	ldr	r3, [pc, #76]	; (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	0e1b      	lsrs	r3, r3, #24
 800450a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800451a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800451e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800452a:	ee17 2a90 	vmov	r2, s15
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004532:	e008      	b.n	8004546 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	609a      	str	r2, [r3, #8]
}
 8004546:	bf00      	nop
 8004548:	3724      	adds	r7, #36	; 0x24
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	58024400 	.word	0x58024400
 8004558:	03d09000 	.word	0x03d09000
 800455c:	46000000 	.word	0x46000000
 8004560:	4c742400 	.word	0x4c742400
 8004564:	4a742400 	.word	0x4a742400
 8004568:	4af42400 	.word	0x4af42400

0800456c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800457a:	4b53      	ldr	r3, [pc, #332]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 800457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b03      	cmp	r3, #3
 8004584:	d101      	bne.n	800458a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e099      	b.n	80046be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800458a:	4b4f      	ldr	r3, [pc, #316]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a4e      	ldr	r2, [pc, #312]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004590:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004596:	f7fc fd01 	bl	8000f9c <HAL_GetTick>
 800459a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800459c:	e008      	b.n	80045b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800459e:	f7fc fcfd 	bl	8000f9c <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e086      	b.n	80046be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045b0:	4b45      	ldr	r3, [pc, #276]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f0      	bne.n	800459e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80045bc:	4b42      	ldr	r3, [pc, #264]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	031b      	lsls	r3, r3, #12
 80045ca:	493f      	ldr	r1, [pc, #252]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	628b      	str	r3, [r1, #40]	; 0x28
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	3b01      	subs	r3, #1
 80045e0:	025b      	lsls	r3, r3, #9
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	041b      	lsls	r3, r3, #16
 80045ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	061b      	lsls	r3, r3, #24
 80045fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004600:	4931      	ldr	r1, [pc, #196]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004602:	4313      	orrs	r3, r2
 8004604:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004606:	4b30      	ldr	r3, [pc, #192]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	492d      	ldr	r1, [pc, #180]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004614:	4313      	orrs	r3, r2
 8004616:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004618:	4b2b      	ldr	r3, [pc, #172]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	f023 0220 	bic.w	r2, r3, #32
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	4928      	ldr	r1, [pc, #160]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004626:	4313      	orrs	r3, r2
 8004628:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800462a:	4b27      	ldr	r3, [pc, #156]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	4a26      	ldr	r2, [pc, #152]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004630:	f023 0310 	bic.w	r3, r3, #16
 8004634:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004636:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004638:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800463a:	4b24      	ldr	r3, [pc, #144]	; (80046cc <RCCEx_PLL2_Config+0x160>)
 800463c:	4013      	ands	r3, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	69d2      	ldr	r2, [r2, #28]
 8004642:	00d2      	lsls	r2, r2, #3
 8004644:	4920      	ldr	r1, [pc, #128]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004646:	4313      	orrs	r3, r2
 8004648:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800464a:	4b1f      	ldr	r3, [pc, #124]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	4a1e      	ldr	r2, [pc, #120]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004650:	f043 0310 	orr.w	r3, r3, #16
 8004654:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d106      	bne.n	800466a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800465c:	4b1a      	ldr	r3, [pc, #104]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	4a19      	ldr	r2, [pc, #100]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004666:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004668:	e00f      	b.n	800468a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d106      	bne.n	800467e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004670:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800467a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800467c:	e005      	b.n	800468a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	4a11      	ldr	r2, [pc, #68]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004684:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004688:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800468a:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a0e      	ldr	r2, [pc, #56]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004690:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004696:	f7fc fc81 	bl	8000f9c <HAL_GetTick>
 800469a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800469c:	e008      	b.n	80046b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800469e:	f7fc fc7d 	bl	8000f9c <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e006      	b.n	80046be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <RCCEx_PLL2_Config+0x15c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f0      	beq.n	800469e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	58024400 	.word	0x58024400
 80046cc:	ffff0007 	.word	0xffff0007

080046d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046de:	4b53      	ldr	r3, [pc, #332]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d101      	bne.n	80046ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e099      	b.n	8004822 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80046ee:	4b4f      	ldr	r3, [pc, #316]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a4e      	ldr	r2, [pc, #312]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 80046f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fa:	f7fc fc4f 	bl	8000f9c <HAL_GetTick>
 80046fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004700:	e008      	b.n	8004714 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004702:	f7fc fc4b 	bl	8000f9c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e086      	b.n	8004822 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004714:	4b45      	ldr	r3, [pc, #276]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f0      	bne.n	8004702 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004720:	4b42      	ldr	r3, [pc, #264]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	051b      	lsls	r3, r3, #20
 800472e:	493f      	ldr	r1, [pc, #252]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 8004730:	4313      	orrs	r3, r2
 8004732:	628b      	str	r3, [r1, #40]	; 0x28
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	3b01      	subs	r3, #1
 800473a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	3b01      	subs	r3, #1
 8004744:	025b      	lsls	r3, r3, #9
 8004746:	b29b      	uxth	r3, r3
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	3b01      	subs	r3, #1
 8004750:	041b      	lsls	r3, r3, #16
 8004752:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	3b01      	subs	r3, #1
 800475e:	061b      	lsls	r3, r3, #24
 8004760:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004764:	4931      	ldr	r1, [pc, #196]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 8004766:	4313      	orrs	r3, r2
 8004768:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800476a:	4b30      	ldr	r3, [pc, #192]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	492d      	ldr	r1, [pc, #180]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 8004778:	4313      	orrs	r3, r2
 800477a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800477c:	4b2b      	ldr	r3, [pc, #172]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	4928      	ldr	r1, [pc, #160]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 800478a:	4313      	orrs	r3, r2
 800478c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800478e:	4b27      	ldr	r3, [pc, #156]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	4a26      	ldr	r2, [pc, #152]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 8004794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004798:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800479a:	4b24      	ldr	r3, [pc, #144]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 800479c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800479e:	4b24      	ldr	r3, [pc, #144]	; (8004830 <RCCEx_PLL3_Config+0x160>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	69d2      	ldr	r2, [r2, #28]
 80047a6:	00d2      	lsls	r2, r2, #3
 80047a8:	4920      	ldr	r1, [pc, #128]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80047ae:	4b1f      	ldr	r3, [pc, #124]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	4a1e      	ldr	r2, [pc, #120]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 80047b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d106      	bne.n	80047ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80047c0:	4b1a      	ldr	r3, [pc, #104]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	4a19      	ldr	r2, [pc, #100]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 80047c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047cc:	e00f      	b.n	80047ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d106      	bne.n	80047e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80047d4:	4b15      	ldr	r3, [pc, #84]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	4a14      	ldr	r2, [pc, #80]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 80047da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047e0:	e005      	b.n	80047ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80047e2:	4b12      	ldr	r3, [pc, #72]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	4a11      	ldr	r2, [pc, #68]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 80047e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80047ee:	4b0f      	ldr	r3, [pc, #60]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a0e      	ldr	r2, [pc, #56]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 80047f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fa:	f7fc fbcf 	bl	8000f9c <HAL_GetTick>
 80047fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004800:	e008      	b.n	8004814 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004802:	f7fc fbcb 	bl	8000f9c <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e006      	b.n	8004822 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004814:	4b05      	ldr	r3, [pc, #20]	; (800482c <RCCEx_PLL3_Config+0x15c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0f0      	beq.n	8004802 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004820:	7bfb      	ldrb	r3, [r7, #15]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	58024400 	.word	0x58024400
 8004830:	ffff0007 	.word	0xffff0007

08004834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e042      	b.n	80048cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484c:	2b00      	cmp	r3, #0
 800484e:	d106      	bne.n	800485e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7fc fa7d 	bl	8000d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2224      	movs	r2, #36	; 0x24
 8004862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0201 	bic.w	r2, r2, #1
 8004874:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f82c 	bl	80048d4 <UART_SetConfig>
 800487c:	4603      	mov	r3, r0
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e022      	b.n	80048cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fe8c 	bl	80055ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 ff13 	bl	80056f0 <UART_CheckIdleState>
 80048ca:	4603      	mov	r3, r0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d8:	b092      	sub	sp, #72	; 0x48
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	431a      	orrs	r2, r3
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4bbe      	ldr	r3, [pc, #760]	; (8004bfc <UART_SetConfig+0x328>)
 8004904:	4013      	ands	r3, r2
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	6812      	ldr	r2, [r2, #0]
 800490a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800490c:	430b      	orrs	r3, r1
 800490e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4ab3      	ldr	r2, [pc, #716]	; (8004c00 <UART_SetConfig+0x32c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800493c:	4313      	orrs	r3, r2
 800493e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	4baf      	ldr	r3, [pc, #700]	; (8004c04 <UART_SetConfig+0x330>)
 8004948:	4013      	ands	r3, r2
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004950:	430b      	orrs	r3, r1
 8004952:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	f023 010f 	bic.w	r1, r3, #15
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4aa6      	ldr	r2, [pc, #664]	; (8004c08 <UART_SetConfig+0x334>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d177      	bne.n	8004a64 <UART_SetConfig+0x190>
 8004974:	4ba5      	ldr	r3, [pc, #660]	; (8004c0c <UART_SetConfig+0x338>)
 8004976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004978:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800497c:	2b28      	cmp	r3, #40	; 0x28
 800497e:	d86d      	bhi.n	8004a5c <UART_SetConfig+0x188>
 8004980:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <UART_SetConfig+0xb4>)
 8004982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004986:	bf00      	nop
 8004988:	08004a2d 	.word	0x08004a2d
 800498c:	08004a5d 	.word	0x08004a5d
 8004990:	08004a5d 	.word	0x08004a5d
 8004994:	08004a5d 	.word	0x08004a5d
 8004998:	08004a5d 	.word	0x08004a5d
 800499c:	08004a5d 	.word	0x08004a5d
 80049a0:	08004a5d 	.word	0x08004a5d
 80049a4:	08004a5d 	.word	0x08004a5d
 80049a8:	08004a35 	.word	0x08004a35
 80049ac:	08004a5d 	.word	0x08004a5d
 80049b0:	08004a5d 	.word	0x08004a5d
 80049b4:	08004a5d 	.word	0x08004a5d
 80049b8:	08004a5d 	.word	0x08004a5d
 80049bc:	08004a5d 	.word	0x08004a5d
 80049c0:	08004a5d 	.word	0x08004a5d
 80049c4:	08004a5d 	.word	0x08004a5d
 80049c8:	08004a3d 	.word	0x08004a3d
 80049cc:	08004a5d 	.word	0x08004a5d
 80049d0:	08004a5d 	.word	0x08004a5d
 80049d4:	08004a5d 	.word	0x08004a5d
 80049d8:	08004a5d 	.word	0x08004a5d
 80049dc:	08004a5d 	.word	0x08004a5d
 80049e0:	08004a5d 	.word	0x08004a5d
 80049e4:	08004a5d 	.word	0x08004a5d
 80049e8:	08004a45 	.word	0x08004a45
 80049ec:	08004a5d 	.word	0x08004a5d
 80049f0:	08004a5d 	.word	0x08004a5d
 80049f4:	08004a5d 	.word	0x08004a5d
 80049f8:	08004a5d 	.word	0x08004a5d
 80049fc:	08004a5d 	.word	0x08004a5d
 8004a00:	08004a5d 	.word	0x08004a5d
 8004a04:	08004a5d 	.word	0x08004a5d
 8004a08:	08004a4d 	.word	0x08004a4d
 8004a0c:	08004a5d 	.word	0x08004a5d
 8004a10:	08004a5d 	.word	0x08004a5d
 8004a14:	08004a5d 	.word	0x08004a5d
 8004a18:	08004a5d 	.word	0x08004a5d
 8004a1c:	08004a5d 	.word	0x08004a5d
 8004a20:	08004a5d 	.word	0x08004a5d
 8004a24:	08004a5d 	.word	0x08004a5d
 8004a28:	08004a55 	.word	0x08004a55
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a32:	e326      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004a34:	2304      	movs	r3, #4
 8004a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a3a:	e322      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a42:	e31e      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004a44:	2310      	movs	r3, #16
 8004a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a4a:	e31a      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004a4c:	2320      	movs	r3, #32
 8004a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a52:	e316      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004a54:	2340      	movs	r3, #64	; 0x40
 8004a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a5a:	e312      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a62:	e30e      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a69      	ldr	r2, [pc, #420]	; (8004c10 <UART_SetConfig+0x33c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d130      	bne.n	8004ad0 <UART_SetConfig+0x1fc>
 8004a6e:	4b67      	ldr	r3, [pc, #412]	; (8004c0c <UART_SetConfig+0x338>)
 8004a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	2b05      	cmp	r3, #5
 8004a78:	d826      	bhi.n	8004ac8 <UART_SetConfig+0x1f4>
 8004a7a:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <UART_SetConfig+0x1ac>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004a99 	.word	0x08004a99
 8004a84:	08004aa1 	.word	0x08004aa1
 8004a88:	08004aa9 	.word	0x08004aa9
 8004a8c:	08004ab1 	.word	0x08004ab1
 8004a90:	08004ab9 	.word	0x08004ab9
 8004a94:	08004ac1 	.word	0x08004ac1
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a9e:	e2f0      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aa6:	e2ec      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004aa8:	2308      	movs	r3, #8
 8004aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aae:	e2e8      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ab6:	e2e4      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004ab8:	2320      	movs	r3, #32
 8004aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004abe:	e2e0      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004ac0:	2340      	movs	r3, #64	; 0x40
 8004ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ac6:	e2dc      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004ac8:	2380      	movs	r3, #128	; 0x80
 8004aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ace:	e2d8      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a4f      	ldr	r2, [pc, #316]	; (8004c14 <UART_SetConfig+0x340>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d130      	bne.n	8004b3c <UART_SetConfig+0x268>
 8004ada:	4b4c      	ldr	r3, [pc, #304]	; (8004c0c <UART_SetConfig+0x338>)
 8004adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	2b05      	cmp	r3, #5
 8004ae4:	d826      	bhi.n	8004b34 <UART_SetConfig+0x260>
 8004ae6:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <UART_SetConfig+0x218>)
 8004ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aec:	08004b05 	.word	0x08004b05
 8004af0:	08004b0d 	.word	0x08004b0d
 8004af4:	08004b15 	.word	0x08004b15
 8004af8:	08004b1d 	.word	0x08004b1d
 8004afc:	08004b25 	.word	0x08004b25
 8004b00:	08004b2d 	.word	0x08004b2d
 8004b04:	2300      	movs	r3, #0
 8004b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b0a:	e2ba      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b12:	e2b6      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004b14:	2308      	movs	r3, #8
 8004b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b1a:	e2b2      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b22:	e2ae      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004b24:	2320      	movs	r3, #32
 8004b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b2a:	e2aa      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004b2c:	2340      	movs	r3, #64	; 0x40
 8004b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b32:	e2a6      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b3a:	e2a2      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a35      	ldr	r2, [pc, #212]	; (8004c18 <UART_SetConfig+0x344>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d130      	bne.n	8004ba8 <UART_SetConfig+0x2d4>
 8004b46:	4b31      	ldr	r3, [pc, #196]	; (8004c0c <UART_SetConfig+0x338>)
 8004b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	2b05      	cmp	r3, #5
 8004b50:	d826      	bhi.n	8004ba0 <UART_SetConfig+0x2cc>
 8004b52:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <UART_SetConfig+0x284>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004b71 	.word	0x08004b71
 8004b5c:	08004b79 	.word	0x08004b79
 8004b60:	08004b81 	.word	0x08004b81
 8004b64:	08004b89 	.word	0x08004b89
 8004b68:	08004b91 	.word	0x08004b91
 8004b6c:	08004b99 	.word	0x08004b99
 8004b70:	2300      	movs	r3, #0
 8004b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b76:	e284      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b7e:	e280      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004b80:	2308      	movs	r3, #8
 8004b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b86:	e27c      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b8e:	e278      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004b90:	2320      	movs	r3, #32
 8004b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b96:	e274      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004b98:	2340      	movs	r3, #64	; 0x40
 8004b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b9e:	e270      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004ba0:	2380      	movs	r3, #128	; 0x80
 8004ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ba6:	e26c      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1b      	ldr	r2, [pc, #108]	; (8004c1c <UART_SetConfig+0x348>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d142      	bne.n	8004c38 <UART_SetConfig+0x364>
 8004bb2:	4b16      	ldr	r3, [pc, #88]	; (8004c0c <UART_SetConfig+0x338>)
 8004bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	2b05      	cmp	r3, #5
 8004bbc:	d838      	bhi.n	8004c30 <UART_SetConfig+0x35c>
 8004bbe:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <UART_SetConfig+0x2f0>)
 8004bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc4:	08004bdd 	.word	0x08004bdd
 8004bc8:	08004be5 	.word	0x08004be5
 8004bcc:	08004bed 	.word	0x08004bed
 8004bd0:	08004bf5 	.word	0x08004bf5
 8004bd4:	08004c21 	.word	0x08004c21
 8004bd8:	08004c29 	.word	0x08004c29
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004be2:	e24e      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004be4:	2304      	movs	r3, #4
 8004be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bea:	e24a      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004bec:	2308      	movs	r3, #8
 8004bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bf2:	e246      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bfa:	e242      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004bfc:	cfff69f3 	.word	0xcfff69f3
 8004c00:	58000c00 	.word	0x58000c00
 8004c04:	11fff4ff 	.word	0x11fff4ff
 8004c08:	40011000 	.word	0x40011000
 8004c0c:	58024400 	.word	0x58024400
 8004c10:	40004400 	.word	0x40004400
 8004c14:	40004800 	.word	0x40004800
 8004c18:	40004c00 	.word	0x40004c00
 8004c1c:	40005000 	.word	0x40005000
 8004c20:	2320      	movs	r3, #32
 8004c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c26:	e22c      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004c28:	2340      	movs	r3, #64	; 0x40
 8004c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c2e:	e228      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c36:	e224      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4ab1      	ldr	r2, [pc, #708]	; (8004f04 <UART_SetConfig+0x630>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d176      	bne.n	8004d30 <UART_SetConfig+0x45c>
 8004c42:	4bb1      	ldr	r3, [pc, #708]	; (8004f08 <UART_SetConfig+0x634>)
 8004c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c4a:	2b28      	cmp	r3, #40	; 0x28
 8004c4c:	d86c      	bhi.n	8004d28 <UART_SetConfig+0x454>
 8004c4e:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <UART_SetConfig+0x380>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004cf9 	.word	0x08004cf9
 8004c58:	08004d29 	.word	0x08004d29
 8004c5c:	08004d29 	.word	0x08004d29
 8004c60:	08004d29 	.word	0x08004d29
 8004c64:	08004d29 	.word	0x08004d29
 8004c68:	08004d29 	.word	0x08004d29
 8004c6c:	08004d29 	.word	0x08004d29
 8004c70:	08004d29 	.word	0x08004d29
 8004c74:	08004d01 	.word	0x08004d01
 8004c78:	08004d29 	.word	0x08004d29
 8004c7c:	08004d29 	.word	0x08004d29
 8004c80:	08004d29 	.word	0x08004d29
 8004c84:	08004d29 	.word	0x08004d29
 8004c88:	08004d29 	.word	0x08004d29
 8004c8c:	08004d29 	.word	0x08004d29
 8004c90:	08004d29 	.word	0x08004d29
 8004c94:	08004d09 	.word	0x08004d09
 8004c98:	08004d29 	.word	0x08004d29
 8004c9c:	08004d29 	.word	0x08004d29
 8004ca0:	08004d29 	.word	0x08004d29
 8004ca4:	08004d29 	.word	0x08004d29
 8004ca8:	08004d29 	.word	0x08004d29
 8004cac:	08004d29 	.word	0x08004d29
 8004cb0:	08004d29 	.word	0x08004d29
 8004cb4:	08004d11 	.word	0x08004d11
 8004cb8:	08004d29 	.word	0x08004d29
 8004cbc:	08004d29 	.word	0x08004d29
 8004cc0:	08004d29 	.word	0x08004d29
 8004cc4:	08004d29 	.word	0x08004d29
 8004cc8:	08004d29 	.word	0x08004d29
 8004ccc:	08004d29 	.word	0x08004d29
 8004cd0:	08004d29 	.word	0x08004d29
 8004cd4:	08004d19 	.word	0x08004d19
 8004cd8:	08004d29 	.word	0x08004d29
 8004cdc:	08004d29 	.word	0x08004d29
 8004ce0:	08004d29 	.word	0x08004d29
 8004ce4:	08004d29 	.word	0x08004d29
 8004ce8:	08004d29 	.word	0x08004d29
 8004cec:	08004d29 	.word	0x08004d29
 8004cf0:	08004d29 	.word	0x08004d29
 8004cf4:	08004d21 	.word	0x08004d21
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfe:	e1c0      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004d00:	2304      	movs	r3, #4
 8004d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d06:	e1bc      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004d08:	2308      	movs	r3, #8
 8004d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d0e:	e1b8      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004d10:	2310      	movs	r3, #16
 8004d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d16:	e1b4      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004d18:	2320      	movs	r3, #32
 8004d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d1e:	e1b0      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004d20:	2340      	movs	r3, #64	; 0x40
 8004d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d26:	e1ac      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004d28:	2380      	movs	r3, #128	; 0x80
 8004d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d2e:	e1a8      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a75      	ldr	r2, [pc, #468]	; (8004f0c <UART_SetConfig+0x638>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d130      	bne.n	8004d9c <UART_SetConfig+0x4c8>
 8004d3a:	4b73      	ldr	r3, [pc, #460]	; (8004f08 <UART_SetConfig+0x634>)
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	2b05      	cmp	r3, #5
 8004d44:	d826      	bhi.n	8004d94 <UART_SetConfig+0x4c0>
 8004d46:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <UART_SetConfig+0x478>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d65 	.word	0x08004d65
 8004d50:	08004d6d 	.word	0x08004d6d
 8004d54:	08004d75 	.word	0x08004d75
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004d85 	.word	0x08004d85
 8004d60:	08004d8d 	.word	0x08004d8d
 8004d64:	2300      	movs	r3, #0
 8004d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6a:	e18a      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d72:	e186      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004d74:	2308      	movs	r3, #8
 8004d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d7a:	e182      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004d7c:	2310      	movs	r3, #16
 8004d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d82:	e17e      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004d84:	2320      	movs	r3, #32
 8004d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d8a:	e17a      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004d8c:	2340      	movs	r3, #64	; 0x40
 8004d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d92:	e176      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004d94:	2380      	movs	r3, #128	; 0x80
 8004d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d9a:	e172      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a5b      	ldr	r2, [pc, #364]	; (8004f10 <UART_SetConfig+0x63c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d130      	bne.n	8004e08 <UART_SetConfig+0x534>
 8004da6:	4b58      	ldr	r3, [pc, #352]	; (8004f08 <UART_SetConfig+0x634>)
 8004da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	2b05      	cmp	r3, #5
 8004db0:	d826      	bhi.n	8004e00 <UART_SetConfig+0x52c>
 8004db2:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <UART_SetConfig+0x4e4>)
 8004db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db8:	08004dd1 	.word	0x08004dd1
 8004dbc:	08004dd9 	.word	0x08004dd9
 8004dc0:	08004de1 	.word	0x08004de1
 8004dc4:	08004de9 	.word	0x08004de9
 8004dc8:	08004df1 	.word	0x08004df1
 8004dcc:	08004df9 	.word	0x08004df9
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd6:	e154      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dde:	e150      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004de0:	2308      	movs	r3, #8
 8004de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004de6:	e14c      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004de8:	2310      	movs	r3, #16
 8004dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dee:	e148      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004df0:	2320      	movs	r3, #32
 8004df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004df6:	e144      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004df8:	2340      	movs	r3, #64	; 0x40
 8004dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dfe:	e140      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004e00:	2380      	movs	r3, #128	; 0x80
 8004e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e06:	e13c      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a41      	ldr	r2, [pc, #260]	; (8004f14 <UART_SetConfig+0x640>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	f040 8082 	bne.w	8004f18 <UART_SetConfig+0x644>
 8004e14:	4b3c      	ldr	r3, [pc, #240]	; (8004f08 <UART_SetConfig+0x634>)
 8004e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e1c:	2b28      	cmp	r3, #40	; 0x28
 8004e1e:	d86d      	bhi.n	8004efc <UART_SetConfig+0x628>
 8004e20:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <UART_SetConfig+0x554>)
 8004e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e26:	bf00      	nop
 8004e28:	08004ecd 	.word	0x08004ecd
 8004e2c:	08004efd 	.word	0x08004efd
 8004e30:	08004efd 	.word	0x08004efd
 8004e34:	08004efd 	.word	0x08004efd
 8004e38:	08004efd 	.word	0x08004efd
 8004e3c:	08004efd 	.word	0x08004efd
 8004e40:	08004efd 	.word	0x08004efd
 8004e44:	08004efd 	.word	0x08004efd
 8004e48:	08004ed5 	.word	0x08004ed5
 8004e4c:	08004efd 	.word	0x08004efd
 8004e50:	08004efd 	.word	0x08004efd
 8004e54:	08004efd 	.word	0x08004efd
 8004e58:	08004efd 	.word	0x08004efd
 8004e5c:	08004efd 	.word	0x08004efd
 8004e60:	08004efd 	.word	0x08004efd
 8004e64:	08004efd 	.word	0x08004efd
 8004e68:	08004edd 	.word	0x08004edd
 8004e6c:	08004efd 	.word	0x08004efd
 8004e70:	08004efd 	.word	0x08004efd
 8004e74:	08004efd 	.word	0x08004efd
 8004e78:	08004efd 	.word	0x08004efd
 8004e7c:	08004efd 	.word	0x08004efd
 8004e80:	08004efd 	.word	0x08004efd
 8004e84:	08004efd 	.word	0x08004efd
 8004e88:	08004ee5 	.word	0x08004ee5
 8004e8c:	08004efd 	.word	0x08004efd
 8004e90:	08004efd 	.word	0x08004efd
 8004e94:	08004efd 	.word	0x08004efd
 8004e98:	08004efd 	.word	0x08004efd
 8004e9c:	08004efd 	.word	0x08004efd
 8004ea0:	08004efd 	.word	0x08004efd
 8004ea4:	08004efd 	.word	0x08004efd
 8004ea8:	08004eed 	.word	0x08004eed
 8004eac:	08004efd 	.word	0x08004efd
 8004eb0:	08004efd 	.word	0x08004efd
 8004eb4:	08004efd 	.word	0x08004efd
 8004eb8:	08004efd 	.word	0x08004efd
 8004ebc:	08004efd 	.word	0x08004efd
 8004ec0:	08004efd 	.word	0x08004efd
 8004ec4:	08004efd 	.word	0x08004efd
 8004ec8:	08004ef5 	.word	0x08004ef5
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed2:	e0d6      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eda:	e0d2      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004edc:	2308      	movs	r3, #8
 8004ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee2:	e0ce      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eea:	e0ca      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004eec:	2320      	movs	r3, #32
 8004eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ef2:	e0c6      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004ef4:	2340      	movs	r3, #64	; 0x40
 8004ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004efa:	e0c2      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004efc:	2380      	movs	r3, #128	; 0x80
 8004efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f02:	e0be      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004f04:	40011400 	.word	0x40011400
 8004f08:	58024400 	.word	0x58024400
 8004f0c:	40007800 	.word	0x40007800
 8004f10:	40007c00 	.word	0x40007c00
 8004f14:	40011800 	.word	0x40011800
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4aad      	ldr	r2, [pc, #692]	; (80051d4 <UART_SetConfig+0x900>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d176      	bne.n	8005010 <UART_SetConfig+0x73c>
 8004f22:	4bad      	ldr	r3, [pc, #692]	; (80051d8 <UART_SetConfig+0x904>)
 8004f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f2a:	2b28      	cmp	r3, #40	; 0x28
 8004f2c:	d86c      	bhi.n	8005008 <UART_SetConfig+0x734>
 8004f2e:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <UART_SetConfig+0x660>)
 8004f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f34:	08004fd9 	.word	0x08004fd9
 8004f38:	08005009 	.word	0x08005009
 8004f3c:	08005009 	.word	0x08005009
 8004f40:	08005009 	.word	0x08005009
 8004f44:	08005009 	.word	0x08005009
 8004f48:	08005009 	.word	0x08005009
 8004f4c:	08005009 	.word	0x08005009
 8004f50:	08005009 	.word	0x08005009
 8004f54:	08004fe1 	.word	0x08004fe1
 8004f58:	08005009 	.word	0x08005009
 8004f5c:	08005009 	.word	0x08005009
 8004f60:	08005009 	.word	0x08005009
 8004f64:	08005009 	.word	0x08005009
 8004f68:	08005009 	.word	0x08005009
 8004f6c:	08005009 	.word	0x08005009
 8004f70:	08005009 	.word	0x08005009
 8004f74:	08004fe9 	.word	0x08004fe9
 8004f78:	08005009 	.word	0x08005009
 8004f7c:	08005009 	.word	0x08005009
 8004f80:	08005009 	.word	0x08005009
 8004f84:	08005009 	.word	0x08005009
 8004f88:	08005009 	.word	0x08005009
 8004f8c:	08005009 	.word	0x08005009
 8004f90:	08005009 	.word	0x08005009
 8004f94:	08004ff1 	.word	0x08004ff1
 8004f98:	08005009 	.word	0x08005009
 8004f9c:	08005009 	.word	0x08005009
 8004fa0:	08005009 	.word	0x08005009
 8004fa4:	08005009 	.word	0x08005009
 8004fa8:	08005009 	.word	0x08005009
 8004fac:	08005009 	.word	0x08005009
 8004fb0:	08005009 	.word	0x08005009
 8004fb4:	08004ff9 	.word	0x08004ff9
 8004fb8:	08005009 	.word	0x08005009
 8004fbc:	08005009 	.word	0x08005009
 8004fc0:	08005009 	.word	0x08005009
 8004fc4:	08005009 	.word	0x08005009
 8004fc8:	08005009 	.word	0x08005009
 8004fcc:	08005009 	.word	0x08005009
 8004fd0:	08005009 	.word	0x08005009
 8004fd4:	08005001 	.word	0x08005001
 8004fd8:	2301      	movs	r3, #1
 8004fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fde:	e050      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fe6:	e04c      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004fe8:	2308      	movs	r3, #8
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fee:	e048      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ff6:	e044      	b.n	8005082 <UART_SetConfig+0x7ae>
 8004ff8:	2320      	movs	r3, #32
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ffe:	e040      	b.n	8005082 <UART_SetConfig+0x7ae>
 8005000:	2340      	movs	r3, #64	; 0x40
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005006:	e03c      	b.n	8005082 <UART_SetConfig+0x7ae>
 8005008:	2380      	movs	r3, #128	; 0x80
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500e:	e038      	b.n	8005082 <UART_SetConfig+0x7ae>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a71      	ldr	r2, [pc, #452]	; (80051dc <UART_SetConfig+0x908>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d130      	bne.n	800507c <UART_SetConfig+0x7a8>
 800501a:	4b6f      	ldr	r3, [pc, #444]	; (80051d8 <UART_SetConfig+0x904>)
 800501c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	2b05      	cmp	r3, #5
 8005024:	d826      	bhi.n	8005074 <UART_SetConfig+0x7a0>
 8005026:	a201      	add	r2, pc, #4	; (adr r2, 800502c <UART_SetConfig+0x758>)
 8005028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502c:	08005045 	.word	0x08005045
 8005030:	0800504d 	.word	0x0800504d
 8005034:	08005055 	.word	0x08005055
 8005038:	0800505d 	.word	0x0800505d
 800503c:	08005065 	.word	0x08005065
 8005040:	0800506d 	.word	0x0800506d
 8005044:	2302      	movs	r3, #2
 8005046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800504a:	e01a      	b.n	8005082 <UART_SetConfig+0x7ae>
 800504c:	2304      	movs	r3, #4
 800504e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005052:	e016      	b.n	8005082 <UART_SetConfig+0x7ae>
 8005054:	2308      	movs	r3, #8
 8005056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800505a:	e012      	b.n	8005082 <UART_SetConfig+0x7ae>
 800505c:	2310      	movs	r3, #16
 800505e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005062:	e00e      	b.n	8005082 <UART_SetConfig+0x7ae>
 8005064:	2320      	movs	r3, #32
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800506a:	e00a      	b.n	8005082 <UART_SetConfig+0x7ae>
 800506c:	2340      	movs	r3, #64	; 0x40
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005072:	e006      	b.n	8005082 <UART_SetConfig+0x7ae>
 8005074:	2380      	movs	r3, #128	; 0x80
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507a:	e002      	b.n	8005082 <UART_SetConfig+0x7ae>
 800507c:	2380      	movs	r3, #128	; 0x80
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a55      	ldr	r2, [pc, #340]	; (80051dc <UART_SetConfig+0x908>)
 8005088:	4293      	cmp	r3, r2
 800508a:	f040 80f8 	bne.w	800527e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800508e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005092:	2b20      	cmp	r3, #32
 8005094:	dc46      	bgt.n	8005124 <UART_SetConfig+0x850>
 8005096:	2b02      	cmp	r3, #2
 8005098:	db75      	blt.n	8005186 <UART_SetConfig+0x8b2>
 800509a:	3b02      	subs	r3, #2
 800509c:	2b1e      	cmp	r3, #30
 800509e:	d872      	bhi.n	8005186 <UART_SetConfig+0x8b2>
 80050a0:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <UART_SetConfig+0x7d4>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	0800512b 	.word	0x0800512b
 80050ac:	08005187 	.word	0x08005187
 80050b0:	08005133 	.word	0x08005133
 80050b4:	08005187 	.word	0x08005187
 80050b8:	08005187 	.word	0x08005187
 80050bc:	08005187 	.word	0x08005187
 80050c0:	08005143 	.word	0x08005143
 80050c4:	08005187 	.word	0x08005187
 80050c8:	08005187 	.word	0x08005187
 80050cc:	08005187 	.word	0x08005187
 80050d0:	08005187 	.word	0x08005187
 80050d4:	08005187 	.word	0x08005187
 80050d8:	08005187 	.word	0x08005187
 80050dc:	08005187 	.word	0x08005187
 80050e0:	08005153 	.word	0x08005153
 80050e4:	08005187 	.word	0x08005187
 80050e8:	08005187 	.word	0x08005187
 80050ec:	08005187 	.word	0x08005187
 80050f0:	08005187 	.word	0x08005187
 80050f4:	08005187 	.word	0x08005187
 80050f8:	08005187 	.word	0x08005187
 80050fc:	08005187 	.word	0x08005187
 8005100:	08005187 	.word	0x08005187
 8005104:	08005187 	.word	0x08005187
 8005108:	08005187 	.word	0x08005187
 800510c:	08005187 	.word	0x08005187
 8005110:	08005187 	.word	0x08005187
 8005114:	08005187 	.word	0x08005187
 8005118:	08005187 	.word	0x08005187
 800511c:	08005187 	.word	0x08005187
 8005120:	08005179 	.word	0x08005179
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	d02a      	beq.n	800517e <UART_SetConfig+0x8aa>
 8005128:	e02d      	b.n	8005186 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800512a:	f7fe ff61 	bl	8003ff0 <HAL_RCCEx_GetD3PCLK1Freq>
 800512e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005130:	e02f      	b.n	8005192 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005136:	4618      	mov	r0, r3
 8005138:	f7fe ff70 	bl	800401c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005140:	e027      	b.n	8005192 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005142:	f107 0318 	add.w	r3, r7, #24
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff f8bc 	bl	80042c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005150:	e01f      	b.n	8005192 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005152:	4b21      	ldr	r3, [pc, #132]	; (80051d8 <UART_SetConfig+0x904>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b00      	cmp	r3, #0
 800515c:	d009      	beq.n	8005172 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800515e:	4b1e      	ldr	r3, [pc, #120]	; (80051d8 <UART_SetConfig+0x904>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	08db      	lsrs	r3, r3, #3
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	4a1d      	ldr	r2, [pc, #116]	; (80051e0 <UART_SetConfig+0x90c>)
 800516a:	fa22 f303 	lsr.w	r3, r2, r3
 800516e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005170:	e00f      	b.n	8005192 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005172:	4b1b      	ldr	r3, [pc, #108]	; (80051e0 <UART_SetConfig+0x90c>)
 8005174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005176:	e00c      	b.n	8005192 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005178:	4b1a      	ldr	r3, [pc, #104]	; (80051e4 <UART_SetConfig+0x910>)
 800517a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800517c:	e009      	b.n	8005192 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800517e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005184:	e005      	b.n	8005192 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005190:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 81ee 	beq.w	8005576 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	4a12      	ldr	r2, [pc, #72]	; (80051e8 <UART_SetConfig+0x914>)
 80051a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051a4:	461a      	mov	r2, r3
 80051a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80051ac:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	4413      	add	r3, r2
 80051b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d305      	bcc.n	80051ca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d910      	bls.n	80051ec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80051d0:	e1d1      	b.n	8005576 <UART_SetConfig+0xca2>
 80051d2:	bf00      	nop
 80051d4:	40011c00 	.word	0x40011c00
 80051d8:	58024400 	.word	0x58024400
 80051dc:	58000c00 	.word	0x58000c00
 80051e0:	03d09000 	.word	0x03d09000
 80051e4:	003d0900 	.word	0x003d0900
 80051e8:	08005c68 	.word	0x08005c68
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ee:	2200      	movs	r2, #0
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	60fa      	str	r2, [r7, #12]
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	4ac0      	ldr	r2, [pc, #768]	; (80054fc <UART_SetConfig+0xc28>)
 80051fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2200      	movs	r2, #0
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	607a      	str	r2, [r7, #4]
 8005206:	e9d7 2300 	ldrd	r2, r3, [r7]
 800520a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800520e:	f7fb f87d 	bl	800030c <__aeabi_uldivmod>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	4610      	mov	r0, r2
 8005218:	4619      	mov	r1, r3
 800521a:	f04f 0200 	mov.w	r2, #0
 800521e:	f04f 0300 	mov.w	r3, #0
 8005222:	020b      	lsls	r3, r1, #8
 8005224:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005228:	0202      	lsls	r2, r0, #8
 800522a:	6979      	ldr	r1, [r7, #20]
 800522c:	6849      	ldr	r1, [r1, #4]
 800522e:	0849      	lsrs	r1, r1, #1
 8005230:	2000      	movs	r0, #0
 8005232:	460c      	mov	r4, r1
 8005234:	4605      	mov	r5, r0
 8005236:	eb12 0804 	adds.w	r8, r2, r4
 800523a:	eb43 0905 	adc.w	r9, r3, r5
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	469a      	mov	sl, r3
 8005246:	4693      	mov	fp, r2
 8005248:	4652      	mov	r2, sl
 800524a:	465b      	mov	r3, fp
 800524c:	4640      	mov	r0, r8
 800524e:	4649      	mov	r1, r9
 8005250:	f7fb f85c 	bl	800030c <__aeabi_uldivmod>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4613      	mov	r3, r2
 800525a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005262:	d308      	bcc.n	8005276 <UART_SetConfig+0x9a2>
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526a:	d204      	bcs.n	8005276 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005272:	60da      	str	r2, [r3, #12]
 8005274:	e17f      	b.n	8005576 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800527c:	e17b      	b.n	8005576 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005286:	f040 80bd 	bne.w	8005404 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800528a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800528e:	2b20      	cmp	r3, #32
 8005290:	dc48      	bgt.n	8005324 <UART_SetConfig+0xa50>
 8005292:	2b00      	cmp	r3, #0
 8005294:	db7b      	blt.n	800538e <UART_SetConfig+0xaba>
 8005296:	2b20      	cmp	r3, #32
 8005298:	d879      	bhi.n	800538e <UART_SetConfig+0xaba>
 800529a:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <UART_SetConfig+0x9cc>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	0800532b 	.word	0x0800532b
 80052a4:	08005333 	.word	0x08005333
 80052a8:	0800538f 	.word	0x0800538f
 80052ac:	0800538f 	.word	0x0800538f
 80052b0:	0800533b 	.word	0x0800533b
 80052b4:	0800538f 	.word	0x0800538f
 80052b8:	0800538f 	.word	0x0800538f
 80052bc:	0800538f 	.word	0x0800538f
 80052c0:	0800534b 	.word	0x0800534b
 80052c4:	0800538f 	.word	0x0800538f
 80052c8:	0800538f 	.word	0x0800538f
 80052cc:	0800538f 	.word	0x0800538f
 80052d0:	0800538f 	.word	0x0800538f
 80052d4:	0800538f 	.word	0x0800538f
 80052d8:	0800538f 	.word	0x0800538f
 80052dc:	0800538f 	.word	0x0800538f
 80052e0:	0800535b 	.word	0x0800535b
 80052e4:	0800538f 	.word	0x0800538f
 80052e8:	0800538f 	.word	0x0800538f
 80052ec:	0800538f 	.word	0x0800538f
 80052f0:	0800538f 	.word	0x0800538f
 80052f4:	0800538f 	.word	0x0800538f
 80052f8:	0800538f 	.word	0x0800538f
 80052fc:	0800538f 	.word	0x0800538f
 8005300:	0800538f 	.word	0x0800538f
 8005304:	0800538f 	.word	0x0800538f
 8005308:	0800538f 	.word	0x0800538f
 800530c:	0800538f 	.word	0x0800538f
 8005310:	0800538f 	.word	0x0800538f
 8005314:	0800538f 	.word	0x0800538f
 8005318:	0800538f 	.word	0x0800538f
 800531c:	0800538f 	.word	0x0800538f
 8005320:	08005381 	.word	0x08005381
 8005324:	2b40      	cmp	r3, #64	; 0x40
 8005326:	d02e      	beq.n	8005386 <UART_SetConfig+0xab2>
 8005328:	e031      	b.n	800538e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800532a:	f7fd fc95 	bl	8002c58 <HAL_RCC_GetPCLK1Freq>
 800532e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005330:	e033      	b.n	800539a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005332:	f7fd fca7 	bl	8002c84 <HAL_RCC_GetPCLK2Freq>
 8005336:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005338:	e02f      	b.n	800539a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800533a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800533e:	4618      	mov	r0, r3
 8005340:	f7fe fe6c 	bl	800401c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005348:	e027      	b.n	800539a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800534a:	f107 0318 	add.w	r3, r7, #24
 800534e:	4618      	mov	r0, r3
 8005350:	f7fe ffb8 	bl	80042c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005358:	e01f      	b.n	800539a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800535a:	4b69      	ldr	r3, [pc, #420]	; (8005500 <UART_SetConfig+0xc2c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d009      	beq.n	800537a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005366:	4b66      	ldr	r3, [pc, #408]	; (8005500 <UART_SetConfig+0xc2c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	08db      	lsrs	r3, r3, #3
 800536c:	f003 0303 	and.w	r3, r3, #3
 8005370:	4a64      	ldr	r2, [pc, #400]	; (8005504 <UART_SetConfig+0xc30>)
 8005372:	fa22 f303 	lsr.w	r3, r2, r3
 8005376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005378:	e00f      	b.n	800539a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800537a:	4b62      	ldr	r3, [pc, #392]	; (8005504 <UART_SetConfig+0xc30>)
 800537c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800537e:	e00c      	b.n	800539a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005380:	4b61      	ldr	r3, [pc, #388]	; (8005508 <UART_SetConfig+0xc34>)
 8005382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005384:	e009      	b.n	800539a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800538c:	e005      	b.n	800539a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005398:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800539a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 80ea 	beq.w	8005576 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	4a55      	ldr	r2, [pc, #340]	; (80054fc <UART_SetConfig+0xc28>)
 80053a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053ac:	461a      	mov	r2, r3
 80053ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80053b4:	005a      	lsls	r2, r3, #1
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	085b      	lsrs	r3, r3, #1
 80053bc:	441a      	add	r2, r3
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ca:	2b0f      	cmp	r3, #15
 80053cc:	d916      	bls.n	80053fc <UART_SetConfig+0xb28>
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d4:	d212      	bcs.n	80053fc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	b29b      	uxth	r3, r3
 80053da:	f023 030f 	bic.w	r3, r3, #15
 80053de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	085b      	lsrs	r3, r3, #1
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053ee:	4313      	orrs	r3, r2
 80053f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80053f8:	60da      	str	r2, [r3, #12]
 80053fa:	e0bc      	b.n	8005576 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005402:	e0b8      	b.n	8005576 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005404:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005408:	2b20      	cmp	r3, #32
 800540a:	dc4b      	bgt.n	80054a4 <UART_SetConfig+0xbd0>
 800540c:	2b00      	cmp	r3, #0
 800540e:	f2c0 8087 	blt.w	8005520 <UART_SetConfig+0xc4c>
 8005412:	2b20      	cmp	r3, #32
 8005414:	f200 8084 	bhi.w	8005520 <UART_SetConfig+0xc4c>
 8005418:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <UART_SetConfig+0xb4c>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	080054ab 	.word	0x080054ab
 8005424:	080054b3 	.word	0x080054b3
 8005428:	08005521 	.word	0x08005521
 800542c:	08005521 	.word	0x08005521
 8005430:	080054bb 	.word	0x080054bb
 8005434:	08005521 	.word	0x08005521
 8005438:	08005521 	.word	0x08005521
 800543c:	08005521 	.word	0x08005521
 8005440:	080054cb 	.word	0x080054cb
 8005444:	08005521 	.word	0x08005521
 8005448:	08005521 	.word	0x08005521
 800544c:	08005521 	.word	0x08005521
 8005450:	08005521 	.word	0x08005521
 8005454:	08005521 	.word	0x08005521
 8005458:	08005521 	.word	0x08005521
 800545c:	08005521 	.word	0x08005521
 8005460:	080054db 	.word	0x080054db
 8005464:	08005521 	.word	0x08005521
 8005468:	08005521 	.word	0x08005521
 800546c:	08005521 	.word	0x08005521
 8005470:	08005521 	.word	0x08005521
 8005474:	08005521 	.word	0x08005521
 8005478:	08005521 	.word	0x08005521
 800547c:	08005521 	.word	0x08005521
 8005480:	08005521 	.word	0x08005521
 8005484:	08005521 	.word	0x08005521
 8005488:	08005521 	.word	0x08005521
 800548c:	08005521 	.word	0x08005521
 8005490:	08005521 	.word	0x08005521
 8005494:	08005521 	.word	0x08005521
 8005498:	08005521 	.word	0x08005521
 800549c:	08005521 	.word	0x08005521
 80054a0:	08005513 	.word	0x08005513
 80054a4:	2b40      	cmp	r3, #64	; 0x40
 80054a6:	d037      	beq.n	8005518 <UART_SetConfig+0xc44>
 80054a8:	e03a      	b.n	8005520 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054aa:	f7fd fbd5 	bl	8002c58 <HAL_RCC_GetPCLK1Freq>
 80054ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80054b0:	e03c      	b.n	800552c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054b2:	f7fd fbe7 	bl	8002c84 <HAL_RCC_GetPCLK2Freq>
 80054b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80054b8:	e038      	b.n	800552c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fe fdac 	bl	800401c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054c8:	e030      	b.n	800552c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054ca:	f107 0318 	add.w	r3, r7, #24
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fe fef8 	bl	80042c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054d8:	e028      	b.n	800552c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054da:	4b09      	ldr	r3, [pc, #36]	; (8005500 <UART_SetConfig+0xc2c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d012      	beq.n	800550c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054e6:	4b06      	ldr	r3, [pc, #24]	; (8005500 <UART_SetConfig+0xc2c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	08db      	lsrs	r3, r3, #3
 80054ec:	f003 0303 	and.w	r3, r3, #3
 80054f0:	4a04      	ldr	r2, [pc, #16]	; (8005504 <UART_SetConfig+0xc30>)
 80054f2:	fa22 f303 	lsr.w	r3, r2, r3
 80054f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054f8:	e018      	b.n	800552c <UART_SetConfig+0xc58>
 80054fa:	bf00      	nop
 80054fc:	08005c68 	.word	0x08005c68
 8005500:	58024400 	.word	0x58024400
 8005504:	03d09000 	.word	0x03d09000
 8005508:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800550c:	4b24      	ldr	r3, [pc, #144]	; (80055a0 <UART_SetConfig+0xccc>)
 800550e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005510:	e00c      	b.n	800552c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005512:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <UART_SetConfig+0xcd0>)
 8005514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005516:	e009      	b.n	800552c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800551e:	e005      	b.n	800552c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800552a:	bf00      	nop
    }

    if (pclk != 0U)
 800552c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d021      	beq.n	8005576 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	4a1c      	ldr	r2, [pc, #112]	; (80055a8 <UART_SetConfig+0xcd4>)
 8005538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800553c:	461a      	mov	r2, r3
 800553e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005540:	fbb3 f2f2 	udiv	r2, r3, r2
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	085b      	lsrs	r3, r3, #1
 800554a:	441a      	add	r2, r3
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	fbb2 f3f3 	udiv	r3, r2, r3
 8005554:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	2b0f      	cmp	r3, #15
 800555a:	d909      	bls.n	8005570 <UART_SetConfig+0xc9c>
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005562:	d205      	bcs.n	8005570 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	b29a      	uxth	r2, r3
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60da      	str	r2, [r3, #12]
 800556e:	e002      	b.n	8005576 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2201      	movs	r2, #1
 800557a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2201      	movs	r2, #1
 8005582:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2200      	movs	r2, #0
 800558a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2200      	movs	r2, #0
 8005590:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005592:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005596:	4618      	mov	r0, r3
 8005598:	3748      	adds	r7, #72	; 0x48
 800559a:	46bd      	mov	sp, r7
 800559c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055a0:	03d09000 	.word	0x03d09000
 80055a4:	003d0900 	.word	0x003d0900
 80055a8:	08005c68 	.word	0x08005c68

080055ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00a      	beq.n	800561a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01a      	beq.n	80056c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056aa:	d10a      	bne.n	80056c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	605a      	str	r2, [r3, #4]
  }
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b098      	sub	sp, #96	; 0x60
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005700:	f7fb fc4c 	bl	8000f9c <HAL_GetTick>
 8005704:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b08      	cmp	r3, #8
 8005712:	d12f      	bne.n	8005774 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800571c:	2200      	movs	r2, #0
 800571e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f88e 	bl	8005844 <UART_WaitOnFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d022      	beq.n	8005774 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800573c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005742:	653b      	str	r3, [r7, #80]	; 0x50
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574c:	647b      	str	r3, [r7, #68]	; 0x44
 800574e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800575a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e6      	bne.n	800572e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e063      	b.n	800583c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	2b04      	cmp	r3, #4
 8005780:	d149      	bne.n	8005816 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005782:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800578a:	2200      	movs	r2, #0
 800578c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f857 	bl	8005844 <UART_WaitOnFlagUntilTimeout>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d03c      	beq.n	8005816 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	623b      	str	r3, [r7, #32]
   return(result);
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ba:	633b      	str	r3, [r7, #48]	; 0x30
 80057bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e6      	bne.n	800579c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3308      	adds	r3, #8
 80057d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	e853 3f00 	ldrex	r3, [r3]
 80057dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f023 0301 	bic.w	r3, r3, #1
 80057e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3308      	adds	r3, #8
 80057ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057ee:	61fa      	str	r2, [r7, #28]
 80057f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	69b9      	ldr	r1, [r7, #24]
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	617b      	str	r3, [r7, #20]
   return(result);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e5      	bne.n	80057ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2220      	movs	r2, #32
 8005806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e012      	b.n	800583c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3758      	adds	r7, #88	; 0x58
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	4613      	mov	r3, r2
 8005852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005854:	e049      	b.n	80058ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585c:	d045      	beq.n	80058ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585e:	f7fb fb9d 	bl	8000f9c <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	429a      	cmp	r2, r3
 800586c:	d302      	bcc.n	8005874 <UART_WaitOnFlagUntilTimeout+0x30>
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e048      	b.n	800590a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b00      	cmp	r3, #0
 8005884:	d031      	beq.n	80058ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	f003 0308 	and.w	r3, r3, #8
 8005890:	2b08      	cmp	r3, #8
 8005892:	d110      	bne.n	80058b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2208      	movs	r2, #8
 800589a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 f839 	bl	8005914 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2208      	movs	r2, #8
 80058a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e029      	b.n	800590a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058c4:	d111      	bne.n	80058ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 f81f 	bl	8005914 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2220      	movs	r2, #32
 80058da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e00f      	b.n	800590a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4013      	ands	r3, r2
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	bf0c      	ite	eq
 80058fa:	2301      	moveq	r3, #1
 80058fc:	2300      	movne	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	461a      	mov	r2, r3
 8005902:	79fb      	ldrb	r3, [r7, #7]
 8005904:	429a      	cmp	r2, r3
 8005906:	d0a6      	beq.n	8005856 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b095      	sub	sp, #84	; 0x54
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005930:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800593a:	643b      	str	r3, [r7, #64]	; 0x40
 800593c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005940:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e6      	bne.n	800591c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3308      	adds	r3, #8
 8005954:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	61fb      	str	r3, [r7, #28]
   return(result);
 800595e:	69fa      	ldr	r2, [r7, #28]
 8005960:	4b1e      	ldr	r3, [pc, #120]	; (80059dc <UART_EndRxTransfer+0xc8>)
 8005962:	4013      	ands	r3, r2
 8005964:	64bb      	str	r3, [r7, #72]	; 0x48
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3308      	adds	r3, #8
 800596c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800596e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005970:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e5      	bne.n	800594e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005986:	2b01      	cmp	r3, #1
 8005988:	d118      	bne.n	80059bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	e853 3f00 	ldrex	r3, [r3]
 8005996:	60bb      	str	r3, [r7, #8]
   return(result);
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f023 0310 	bic.w	r3, r3, #16
 800599e:	647b      	str	r3, [r7, #68]	; 0x44
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a8:	61bb      	str	r3, [r7, #24]
 80059aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	6979      	ldr	r1, [r7, #20]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	e841 2300 	strex	r3, r2, [r1]
 80059b4:	613b      	str	r3, [r7, #16]
   return(result);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e6      	bne.n	800598a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2220      	movs	r2, #32
 80059c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	675a      	str	r2, [r3, #116]	; 0x74
}
 80059d0:	bf00      	nop
 80059d2:	3754      	adds	r7, #84	; 0x54
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	effffffe 	.word	0xeffffffe

080059e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80059f2:	2302      	movs	r3, #2
 80059f4:	e027      	b.n	8005a46 <HAL_UARTEx_DisableFifoMode+0x66>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2224      	movs	r2, #36	; 0x24
 8005a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0201 	bic.w	r2, r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d101      	bne.n	8005a6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a66:	2302      	movs	r3, #2
 8005a68:	e02d      	b.n	8005ac6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2224      	movs	r2, #36	; 0x24
 8005a76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0201 	bic.w	r2, r2, #1
 8005a90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f850 	bl	8005b4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e02d      	b.n	8005b42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2224      	movs	r2, #36	; 0x24
 8005af2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0201 	bic.w	r2, r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f812 	bl	8005b4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d108      	bne.n	8005b6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b6c:	e031      	b.n	8005bd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b6e:	2310      	movs	r3, #16
 8005b70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b72:	2310      	movs	r3, #16
 8005b74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	0e5b      	lsrs	r3, r3, #25
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	0f5b      	lsrs	r3, r3, #29
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b96:	7bbb      	ldrb	r3, [r7, #14]
 8005b98:	7b3a      	ldrb	r2, [r7, #12]
 8005b9a:	4911      	ldr	r1, [pc, #68]	; (8005be0 <UARTEx_SetNbDataToProcess+0x94>)
 8005b9c:	5c8a      	ldrb	r2, [r1, r2]
 8005b9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ba2:	7b3a      	ldrb	r2, [r7, #12]
 8005ba4:	490f      	ldr	r1, [pc, #60]	; (8005be4 <UARTEx_SetNbDataToProcess+0x98>)
 8005ba6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ba8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
 8005bb6:	7b7a      	ldrb	r2, [r7, #13]
 8005bb8:	4909      	ldr	r1, [pc, #36]	; (8005be0 <UARTEx_SetNbDataToProcess+0x94>)
 8005bba:	5c8a      	ldrb	r2, [r1, r2]
 8005bbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bc0:	7b7a      	ldrb	r2, [r7, #13]
 8005bc2:	4908      	ldr	r1, [pc, #32]	; (8005be4 <UARTEx_SetNbDataToProcess+0x98>)
 8005bc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005bd2:	bf00      	nop
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	08005c80 	.word	0x08005c80
 8005be4:	08005c88 	.word	0x08005c88

08005be8 <__libc_init_array>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	4d0d      	ldr	r5, [pc, #52]	; (8005c20 <__libc_init_array+0x38>)
 8005bec:	4c0d      	ldr	r4, [pc, #52]	; (8005c24 <__libc_init_array+0x3c>)
 8005bee:	1b64      	subs	r4, r4, r5
 8005bf0:	10a4      	asrs	r4, r4, #2
 8005bf2:	2600      	movs	r6, #0
 8005bf4:	42a6      	cmp	r6, r4
 8005bf6:	d109      	bne.n	8005c0c <__libc_init_array+0x24>
 8005bf8:	4d0b      	ldr	r5, [pc, #44]	; (8005c28 <__libc_init_array+0x40>)
 8005bfa:	4c0c      	ldr	r4, [pc, #48]	; (8005c2c <__libc_init_array+0x44>)
 8005bfc:	f000 f820 	bl	8005c40 <_init>
 8005c00:	1b64      	subs	r4, r4, r5
 8005c02:	10a4      	asrs	r4, r4, #2
 8005c04:	2600      	movs	r6, #0
 8005c06:	42a6      	cmp	r6, r4
 8005c08:	d105      	bne.n	8005c16 <__libc_init_array+0x2e>
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}
 8005c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c10:	4798      	blx	r3
 8005c12:	3601      	adds	r6, #1
 8005c14:	e7ee      	b.n	8005bf4 <__libc_init_array+0xc>
 8005c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c1a:	4798      	blx	r3
 8005c1c:	3601      	adds	r6, #1
 8005c1e:	e7f2      	b.n	8005c06 <__libc_init_array+0x1e>
 8005c20:	08005c98 	.word	0x08005c98
 8005c24:	08005c98 	.word	0x08005c98
 8005c28:	08005c98 	.word	0x08005c98
 8005c2c:	08005c9c 	.word	0x08005c9c

08005c30 <memset>:
 8005c30:	4402      	add	r2, r0
 8005c32:	4603      	mov	r3, r0
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d100      	bne.n	8005c3a <memset+0xa>
 8005c38:	4770      	bx	lr
 8005c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c3e:	e7f9      	b.n	8005c34 <memset+0x4>

08005c40 <_init>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	bf00      	nop
 8005c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c46:	bc08      	pop	{r3}
 8005c48:	469e      	mov	lr, r3
 8005c4a:	4770      	bx	lr

08005c4c <_fini>:
 8005c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4e:	bf00      	nop
 8005c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c52:	bc08      	pop	{r3}
 8005c54:	469e      	mov	lr, r3
 8005c56:	4770      	bx	lr
